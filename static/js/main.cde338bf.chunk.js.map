{"version":3,"sources":["smoothScroll.js","components/ClapRow.jsx","components/PatternTable.jsx","components/Input.jsx","Oscillator.js","hooks/useInputInteger.js","hooks/useInputFloat.js","hooks/useInputCheckbox.js","business/util.js","business/tempo.js","components/App.jsx","reportWebVitals.js","index.js"],"names":["smoothScroll","element","position","duration","easingFn","originalPosition","scrollTop","dx","startTime","performance","now","requestAnimationFrame","scroll","dt","ClapRow","React","forwardRef","ref","clapPattern","head","shift","highlightPulse","currentPattern","donePattern","userInput","className","map","_","i","shifted","length","isClap","didntHit","undefined","colorClass","defaultProps","SCROLL_EASING","t","b","c","d","Math","sin","PI","PatternTable","buttonHandler","buttonLabel","pattern","pulse","repeats","originalPattern","rowsRef","useRef","scrollAnchorRef","scrollToPattern","useCallback","document","scrollingElement","current","offsetTop","useEffect","e","onClick","Array","apply","floor","Input","label","props","type","Oscillator","context","f","this","oscillator","createOscillator","frequency","value","gain","createGain","start","connect","destination","end","setValueAtTime","currentTime","cancelScheduledValues","disconnect","useInputInteger","key","min","max","step","defaultValue","parse","string","parseInt","Number","isInteger","useState","localStorage","getItem","setValue","handleChange","newValue","target","parsedValue","setItem","onChange","useInputFloat","parseFloat","isNaN","useInputCheckbox","checked","setChecked","newChecked","mathMod","n","mod","getSecsPerBeat","bpm","getPosition","swing","pulsesPerPattern","totalBeats","totalPulses","getPulseStart","CLAP_PATTERN","CLAP_LENGTH","CLAP1_KEYS","CLAP2_KEYS","App","state","setState","setUserInput","tempo","clap1","clap2","metronome","countMetronome","clap1Ref","clap2Ref","metronomeRef","timeIntervalRef","lastPulseRef","timeStampRef","handleStop","clearInterval","schedulePulseSound","instant","pulseStart","pulseEnd","schedule","isMetronome","isCountMetronome","scheduleFrequency","schedulePulse","schedulePattern","handleStart","timeStamp","resume","setInterval","handleKeyDown","repeat","keyCode","eventTimeFix","secsPerBeat","currPulseDiff","nextPulseDiff","getPulseDiff","includes","console","log","actualPulse","actualPattern","window","addEventListener","removeEventListener","href","process","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AudioContext","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cde338bf.chunk.js","sourcesContent":["// Easing fns\n// t: current time, b: begInnIng value, c: target value, d: duration\n\nexport const linearSmooth = (t, b, c, d) => (t / d) * c + b\nexport const easeOutCubic = (t, b, c, d) =>\n  c * ((t = t / d - 1) * t * t + 1) + b\nexport const easeOutSine = (t, b, c, d) =>\n  c * Math.sin((t / d) * (Math.PI / 2)) + b\n\nexport const smoothScroll = (element, position, duration, easingFn) => {\n  const originalPosition = element.scrollTop\n  const dx = position - element.scrollTop\n  const startTime = performance.now()\n\n  const scroll = () => {\n    const dt = performance.now() - startTime\n\n    if (dt > duration) {\n      element.scrollTop = position\n      return\n    }\n\n    element.scrollTop = easingFn(dt, originalPosition, dx, duration)\n\n    requestAnimationFrame(scroll)\n  }\n\n  requestAnimationFrame(scroll)\n}\n\nexport default smoothScroll\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ClapRow = React.forwardRef(\n  (\n    {\n      clapPattern,\n      head,\n      shift,\n      highlightPulse,\n      currentPattern,\n      donePattern,\n      userInput,\n      className,\n    },\n    ref,\n  ) => (\n    <div ref={ref} className={`clap-row ${className}`}>\n      <div className=\"head\">{head}</div>\n      <div className=\"pattern\">\n        {clapPattern.map((_, i) => {\n          const shifted = (i + shift) % clapPattern.length\n          const isClap = clapPattern[shifted]\n          let className = `cell pulse ${isClap ? 'clap' : 'silence'} ${\n            i === highlightPulse ? 'highlight' : ''\n          } `\n\n          const didntHit = userInput === undefined || userInput[i] === undefined\n          const colorClass = didntHit\n            ? 'no-hit'\n            : userInput[i] > 2 / 3\n            ? 'hit-bad'\n            : userInput[i] > 1 / 3\n            ? 'hit-ok'\n            : 'hit-good'\n\n          if (currentPattern) {\n            if (i < highlightPulse || (i === highlightPulse && !didntHit)) {\n              className += colorClass\n            }\n          } else if (donePattern || userInput !== undefined) {\n            className += colorClass\n          }\n\n          return <div key={i} className={className} />\n        })}\n      </div>\n    </div>\n  ),\n)\n\nClapRow.propTypes = {\n  head: PropTypes.string,\n  shift: PropTypes.number,\n  className: PropTypes.string,\n}\n\nClapRow.defaultProps = {\n  head: '',\n  shift: 0,\n  className: '',\n}\n\nexport default ClapRow\n","import { smoothScroll, easeOutSine } from '../smoothScroll'\n\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\n\nimport ClapRow from './ClapRow'\n\nconst EMPTY_ROWS = 1\nconst SCROLL_DURATION = 300\nconst SCROLL_EASING = easeOutSine\nconst OVERSCROLL_PX = 4\n\nconst PatternTable = ({\n  buttonHandler,\n  buttonLabel,\n  clapPattern,\n  pattern,\n  pulse,\n  repeats,\n  userInput,\n  className,\n}) => {\n  const originalPattern = pattern\n\n  if (pattern === undefined || pattern <= 0) pattern = 0\n\n  const rowsRef = useRef([])\n  const scrollAnchorRef = useRef(null)\n\n  const scrollToPattern = useCallback((i) => {\n    smoothScroll(\n      document.scrollingElement,\n      rowsRef.current[EMPTY_ROWS + i].offsetTop -\n        rowsRef.current[EMPTY_ROWS].offsetTop +\n        scrollAnchorRef.current.offsetTop +\n        OVERSCROLL_PX,\n      SCROLL_DURATION,\n      SCROLL_EASING,\n    )\n  }, [])\n\n  useEffect(() => {\n    if (originalPattern !== undefined) {\n      scrollToPattern(originalPattern <= 0 ? 0 : originalPattern)\n    }\n  }, [originalPattern, scrollToPattern])\n\n  return (\n    <div\n      className={`pattern-table noselect ${className}`}\n      ref={(e) => {\n        scrollAnchorRef.current = e\n      }}\n    >\n      <div className=\"arrow-row\">\n        <div className=\"head\">\n          <button className=\"noselect\" onClick={buttonHandler}>\n            {buttonLabel}\n          </button>\n        </div>\n        <div className=\"pattern\">\n          {clapPattern.map((_, i) => (\n            <div key={i} className=\"cell arrow\">\n              {originalPattern >= -1 && i === pulse ? '▼' : ''}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"pattern-clap1\">\n        <ClapRow\n          clapPattern={clapPattern}\n          head={'Clap 1 ➡'}\n          shift={0}\n          highlightPulse={pulse}\n        />\n      </div>\n\n      <div className=\"pattern-clap2\">\n        {Array.apply(null, { length: EMPTY_ROWS }).map((_, i) => (\n          <ClapRow\n            key={i}\n            ref={(e) => {\n              rowsRef.current[i] = e\n            }}\n            clapPattern={clapPattern}\n            className=\"empty\"\n          />\n        ))}\n        {Array.apply(null, {\n          length: (clapPattern.length + 1) * repeats,\n        }).map((_, i) => (\n          <ClapRow\n            key={i}\n            ref={(e) => {\n              rowsRef.current[i + EMPTY_ROWS] = e\n            }}\n            clapPattern={clapPattern}\n            className={i === pattern ? 'highlight' : ''}\n            highlightPulse={i === pattern ? pulse : undefined}\n            head={i === pattern ? 'Clap 2 ➡' : ''}\n            shift={Math.floor(i / repeats)}\n            userInput={userInput[i]}\n            donePattern={i < originalPattern}\n            currentPattern={i === originalPattern}\n          />\n        ))}\n        <div className=\"padder\">\n          <div className=\"head\" />\n          <div className=\"pattern empty\">\n            {clapPattern.map((_, i) => {\n              return <div key={i} className=\"cell pulse\" />\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nPatternTable.propTypes = {\n  className: PropTypes.string,\n}\n\nPatternTable.defaultProps = {\n  className: '',\n}\n\nexport default PatternTable\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Input = ({ label, ...props }) => (\n  <label>\n    {props.type !== 'checkbox' ? (\n      <span className=\"label noselect\">{label}</span>\n    ) : null}\n    <input {...props} />\n    {props.type === 'checkbox' ? (\n      <span className=\"label noselect\">{label}</span>\n    ) : null}\n  </label>\n)\n\nInput.propTypes = {\n  label: PropTypes.string,\n}\n\nexport default Input\n","export default class Oscillator {\n  constructor(context, f) {\n    this.f = f\n    this.context = context\n\n    this.oscillator = context.createOscillator()\n    this.oscillator.type = 'square'\n    this.oscillator.frequency.value = f\n\n    this.gain = context.createGain()\n    this.gain.gain.value = 0\n\n    this.oscillator.start()\n    this.oscillator.connect(this.gain)\n\n    this.gain.connect(context.destination)\n  }\n\n  schedule(gain, start, end) {\n    this.gain.gain.setValueAtTime(gain, start)\n    this.gain.gain.setValueAtTime(0, end)\n  }\n\n  scheduleFrequency(frequency, start) {\n    this.oscillator.frequency.setValueAtTime(frequency, start)\n  }\n\n  cancelScheduledValues() {\n    const now = this.context.currentTime\n\n    this.oscillator.frequency.cancelScheduledValues(now)\n    this.gain.gain.cancelScheduledValues(now)\n\n    this.gain.gain.value = 0\n    this.oscillator.frequency.value = this.f\n  }\n\n  disconnect() {\n    this.gain.disconnect()\n    this.oscillator.disconnect()\n  }\n}\n","import { useCallback, useState } from 'react'\r\n\r\nconst useInputInteger = (\r\n  key,\r\n  { min, max, step } = {},\r\n  defaultValue = undefined,\r\n) => {\r\n  const parse = useCallback(\r\n    (string) => {\r\n      let value = parseInt(string, 10)\r\n\r\n      if (!Number.isInteger(value)) {\r\n        return defaultValue\r\n      }\r\n\r\n      if (min !== undefined) {\r\n        value = Math.max(min, value)\r\n      }\r\n\r\n      if (max !== undefined) {\r\n        value = Math.min(max, value)\r\n      }\r\n\r\n      return value\r\n    },\r\n    [min, max, defaultValue],\r\n  )\r\n\r\n  const [value, setValue] = useState(() => parse(localStorage.getItem(key)))\r\n\r\n  const handleChange = useCallback(\r\n    ({ target: { value: newValue } }) => {\r\n      const parsedValue = parse(newValue)\r\n\r\n      localStorage.setItem(key, parsedValue)\r\n      setValue(parsedValue)\r\n    },\r\n    [key, parse],\r\n  )\r\n\r\n  return {\r\n    type: 'number',\r\n    min,\r\n    max,\r\n    step,\r\n    value,\r\n    onChange: handleChange,\r\n  }\r\n}\r\n\r\nexport default useInputInteger\r\n","import { useCallback, useState } from 'react'\r\n\r\nconst useInputFloat = (\r\n  key,\r\n  { min, max, step } = {},\r\n  defaultValue = undefined,\r\n) => {\r\n  const parse = useCallback(\r\n    (string) => {\r\n      let value = parseFloat(string, 10)\r\n\r\n      if (typeof value !== 'number' || isNaN(value)) {\r\n        return defaultValue\r\n      }\r\n\r\n      if (min !== undefined) {\r\n        value = Math.max(min, value)\r\n      }\r\n\r\n      if (max !== undefined) {\r\n        value = Math.min(max, value)\r\n      }\r\n\r\n      return value\r\n    },\r\n    [min, max, defaultValue],\r\n  )\r\n\r\n  const [value, setValue] = useState(() => parse(localStorage.getItem(key)))\r\n\r\n  const handleChange = useCallback(\r\n    ({ target: { value: newValue } }) => {\r\n      const parsedValue = parse(newValue)\r\n\r\n      localStorage.setItem(key, parsedValue)\r\n      setValue(parsedValue)\r\n    },\r\n    [key, parse],\r\n  )\r\n\r\n  return {\r\n    type: 'number',\r\n    min,\r\n    max,\r\n    step,\r\n    value,\r\n    onChange: handleChange,\r\n  }\r\n}\r\n\r\nexport default useInputFloat\r\n","import { useCallback, useState } from 'react'\r\n\r\nconst useInputCheckbox = (key, defaultValue = false) => {\r\n  const parse = useCallback(\r\n    (string) =>\r\n      string === true || string === 'true'\r\n        ? true\r\n        : string === false || string === 'false'\r\n        ? false\r\n        : defaultValue,\r\n    [defaultValue],\r\n  )\r\n\r\n  const [checked, setChecked] = useState(() => parse(localStorage.getItem(key)))\r\n\r\n  const handleChange = useCallback(\r\n    ({ target: { checked } }) => {\r\n      const newChecked = parse(checked)\r\n\r\n      localStorage.setItem(key, newChecked)\r\n      setChecked(newChecked)\r\n    },\r\n    [key, parse],\r\n  )\r\n\r\n  return {\r\n    type: 'checkbox',\r\n    checked,\r\n    onChange: handleChange,\r\n  }\r\n}\r\n\r\nexport default useInputCheckbox\r\n","export const mathMod = (n, mod) => (mod + (n % mod)) % mod\r\n","import { mathMod } from './util'\r\n\r\nconst PULSES_PER_BEAT = 2\r\n\r\nexport const getSecsPerBeat = (bpm) => 60 / bpm\r\n\r\nexport const getPosition = (\r\n  bpm,\r\n  swing,\r\n  pulsesPerPattern,\r\n  startTime,\r\n  currentTime,\r\n) => {\r\n  if (startTime === null) {\r\n    return {}\r\n  }\r\n\r\n  const totalBeats = (currentTime - startTime) / getSecsPerBeat(bpm)\r\n\r\n  const totalPulses =\r\n    Math.floor(totalBeats) * PULSES_PER_BEAT +\r\n    (mathMod(totalBeats, 1) < swing ? 0 : 1)\r\n\r\n  return {\r\n    pattern: Math.floor(totalPulses / pulsesPerPattern),\r\n    pulse: mathMod(totalPulses, pulsesPerPattern),\r\n    totalPulses,\r\n  }\r\n}\r\n\r\nexport const getPulseStart = (bpm, swing, startTime, totalPulses) => {\r\n  const totalBeats =\r\n    Math.floor(totalPulses / PULSES_PER_BEAT) +\r\n    (totalPulses % PULSES_PER_BEAT === 0 ? 0 : swing)\r\n\r\n  return startTime + totalBeats * getSecsPerBeat(bpm)\r\n}\r\n\r\nexport const getPulseDiff = (\r\n  bpm,\r\n  swing,\r\n  pulsesPerPattern,\r\n  startTime,\r\n  currentTime,\r\n) => {\r\n  const { totalPulses } = getPosition(\r\n    bpm,\r\n    swing,\r\n    pulsesPerPattern,\r\n    startTime,\r\n    currentTime,\r\n  )\r\n\r\n  const secsPerBeat = getSecsPerBeat(bpm)\r\n\r\n  const currPulseDiff =\r\n    (currentTime - getPulseStart(bpm, swing, startTime, totalPulses)) /\r\n    (secsPerBeat * swing)\r\n\r\n  const nextPulseDiff =\r\n    (getPulseStart(bpm, swing, startTime, totalPulses + 1) - currentTime) /\r\n    (secsPerBeat * (1 - swing))\r\n\r\n  return {\r\n    currPulseDiff,\r\n    nextPulseDiff,\r\n  }\r\n}\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\n\nimport PatternTable from './PatternTable'\nimport Input from './Input'\n\nimport Oscillator from '../Oscillator'\n\nimport useInputInteger from '../hooks/useInputInteger'\nimport useInputFloat from '../hooks/useInputFloat'\nimport useInputCheckbox from '../hooks/useInputCheckbox'\nimport {\n  getPosition,\n  getPulseDiff,\n  getPulseStart,\n  getSecsPerBeat,\n} from '../business/tempo'\n\nconst CLAP_PATTERN = [\n  true,\n  true,\n  true,\n  false,\n  true,\n  true,\n  false,\n  true,\n  false,\n  true,\n  true,\n  false,\n]\nconst CLAP_LENGTH = 0.0125\nconst CLAP1_F = 440\nconst CLAP2_F = 230\nconst METRONOME_F = 890\nconst METRONOME_ACCENT_F = 1780\nconst ACCENT_GAIN = 1\nconst GAIN = 0.25\nconst CLAP1_KEYS = [90]\nconst CLAP2_KEYS = [77]\n\nconst App = ({ context }) => {\n  const [state, setState] = useState({\n    startTime: null,\n    now: null,\n  })\n\n  const [userInput, setUserInput] = useState([])\n\n  const tempo = useInputInteger('tempo', { min: 1, max: 999, step: 1 }, 120)\n  const repeats = useInputInteger('repeats', { min: 1, max: 999, step: 1 }, 4)\n  const swing = useInputFloat('swing', { min: 0.1, max: 0.9, step: 0.01 }, 0.5)\n  const clap1 = useInputCheckbox('clap1', true)\n  const clap2 = useInputCheckbox('clap2', true)\n  const metronome = useInputCheckbox('metronome', false)\n  const countMetronome = useInputCheckbox('countMetronome', true)\n\n  const clap1Ref = useRef(null)\n  const clap2Ref = useRef(null)\n  const metronomeRef = useRef(null)\n  const timeIntervalRef = useRef(null)\n  const lastPulseRef = useRef(null)\n  const timeStampRef = useRef(null)\n\n  const handleStop = useCallback(() => {\n    clearInterval(timeIntervalRef.current)\n\n    clap1Ref.current.cancelScheduledValues()\n    clap2Ref.current.cancelScheduledValues()\n    metronomeRef.current.cancelScheduledValues()\n\n    setState({\n      startTime: null,\n      now: null,\n    })\n  }, [])\n\n  const schedulePulseSound = useCallback(\n    (pulse, pattern, totalPulses, instant) => {\n      const pulseStart = getPulseStart(\n        tempo.value,\n        swing.value,\n        state.startTime,\n        totalPulses,\n      )\n      const pulseEnd = pulseStart + CLAP_LENGTH\n      const gain = pulse === 0 ? ACCENT_GAIN : GAIN\n\n      if (pattern >= 0) {\n        if (clap1.checked && CLAP_PATTERN[pulse % CLAP_PATTERN.length]) {\n          clap1Ref.current.schedule(gain, pulseStart, pulseEnd)\n        }\n\n        const shift = Math.floor(pattern / repeats.value)\n        if (\n          clap2.checked &&\n          CLAP_PATTERN[(shift + pulse) % CLAP_PATTERN.length]\n        ) {\n          clap2Ref.current.schedule(gain, pulseStart, pulseEnd)\n        }\n      }\n\n      const isMetronome = metronome.checked && pattern >= 0 && pulse % 2 === 0\n      const isCountMetronome =\n        countMetronome.checked && pattern === -1 && pulse % 2 === 0\n      if (isMetronome || isCountMetronome) {\n        metronomeRef.current.scheduleFrequency(\n          pulse === 0 ? METRONOME_ACCENT_F : METRONOME_F,\n          pulseStart,\n        )\n        metronomeRef.current.schedule(gain, pulseStart, pulseEnd)\n      }\n    },\n    [\n      clap1.checked,\n      clap2.checked,\n      metronome.checked,\n      countMetronome.checked,\n      repeats.value,\n      state.startTime,\n      swing.value,\n      tempo.value,\n    ],\n  )\n\n  // handleSound\n  useEffect(() => {\n    const { pattern, pulse, totalPulses } = getPosition(\n      tempo.value,\n      swing.value,\n      CLAP_PATTERN.length,\n      state.startTime,\n      state.now,\n    )\n\n    if (pattern >= (CLAP_PATTERN.length + 1) * repeats.value) {\n      handleStop()\n      return\n    }\n\n    if (lastPulseRef.current === null) {\n      // Just started: schedfule first pulse\n      lastPulseRef.current = 0\n    } else {\n      if (pulse === lastPulseRef.current) return\n      lastPulseRef.current = pulse\n    }\n\n    // Schedule _next_ pulse\n\n    let schedulePulse = pulse\n    let schedulePattern = pattern\n\n    schedulePulse += 1\n\n    if (schedulePulse === CLAP_PATTERN.length) {\n      schedulePulse = 0\n      schedulePattern += 1\n    }\n\n    if (pattern >= (CLAP_PATTERN.length + 1) * repeats.value) return\n\n    schedulePulseSound(schedulePulse, schedulePattern, totalPulses + 1)\n  }, [\n    handleStop,\n    schedulePulseSound,\n    repeats.value,\n    tempo.value,\n    swing.value,\n    state.startTime,\n    state.now,\n  ])\n\n  // Playback methods\n\n  const handleStart = useCallback(\n    ({ timeStamp }) => {\n      context.resume()\n\n      const now = context.currentTime\n\n      clap1Ref.current.cancelScheduledValues()\n      clap2Ref.current.cancelScheduledValues()\n      metronomeRef.current.cancelScheduledValues()\n\n      timeStampRef.current = timeStamp\n\n      lastPulseRef.current = null\n\n      setState({\n        startTime:\n          now + (getSecsPerBeat(tempo.value) / 2) * CLAP_PATTERN.length,\n        now: now,\n      })\n\n      setUserInput([])\n\n      if (countMetronome.checked) {\n        metronomeRef.current.schedule(ACCENT_GAIN, now, now + CLAP_LENGTH)\n      }\n\n      timeIntervalRef.current = setInterval(() => {\n        setState((state) => ({\n          startTime: state.startTime,\n          now: context.currentTime,\n        }))\n      }, 1)\n    },\n    [context, tempo.value, countMetronome.checked],\n  )\n\n  useEffect(() => {\n    clap1Ref.current = new Oscillator(context, CLAP1_F)\n    clap2Ref.current = new Oscillator(context, CLAP2_F)\n    metronomeRef.current = new Oscillator(context, METRONOME_ACCENT_F)\n\n    return () => {\n      handleStop()\n\n      clap1Ref.current.disconnect()\n      clap2Ref.current.disconnect()\n      metronomeRef.current.disconnect()\n    }\n  }, [context, handleStop])\n\n  //\n\n  useEffect(() => {\n    const handleKeyDown = ({ repeat, key, keyCode, timeStamp }) => {\n      if (repeat) return\n\n      const { pattern, pulse } = getPosition(\n        tempo.value,\n        swing.value,\n        CLAP_PATTERN.length,\n        state.startTime,\n        context.currentTime,\n      )\n\n      const eventTimeFix = (performance.now() - timeStamp) / 1000\n\n      const { currPulseDiff, nextPulseDiff } = getPulseDiff(\n        tempo.value,\n        swing.value,\n        CLAP_PATTERN.length,\n        state.startTime,\n        context.currentTime - eventTimeFix,\n      )\n\n      if (CLAP1_KEYS.includes(keyCode)) {\n        console.log('clap1', currPulseDiff, nextPulseDiff)\n\n        setUserInput((userInput) => {\n          if (userInput[pattern] === undefined) {\n            userInput[pattern] = []\n          }\n\n          if (currPulseDiff < nextPulseDiff) {\n            userInput[pattern][pulse] = currPulseDiff\n          } else {\n            let actualPulse = pulse + 1\n            let actualPattern = pattern\n\n            if (actualPulse === CLAP_PATTERN.length) {\n              actualPulse = 0\n              actualPattern += 1\n\n              if (userInput[actualPattern] === undefined) {\n                userInput[actualPattern] = []\n              }\n            }\n\n            userInput[actualPattern][actualPulse] = nextPulseDiff\n          }\n\n          return userInput\n        })\n      } else if (CLAP2_KEYS.includes(keyCode)) {\n        console.log('clap2', currPulseDiff, nextPulseDiff)\n      } else {\n        console.log(key, keyCode)\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown, false)\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown, false)\n    }\n  }, [tempo.value, swing.value, state.startTime, context])\n\n  // RENDER\n\n  const { pattern, pulse } = getPosition(\n    tempo.value,\n    swing.value,\n    CLAP_PATTERN.length,\n    state.startTime,\n    context.currentTime,\n  )\n\n  let buttonHandler, buttonLabel\n  if (pattern === undefined) {\n    buttonHandler = handleStart\n    buttonLabel = 'Start'\n  } else if (pattern < 0) {\n    buttonHandler = handleStop\n    buttonLabel = Math.floor(pulse / 2) + 1\n  } else {\n    buttonHandler = handleStop\n    buttonLabel = 'Stop'\n  }\n\n  return (\n    <div className=\"reich-app\">\n      <header>\n        <h1>\n          <a href={process.env.PUBLIC_URL}>Reich Clapping Trainer</a>\n        </h1>\n      </header>\n\n      <section>\n        <p>\n          <a\n            href=\"https://en.wikipedia.org/wiki/Clapping_Music\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Clapping Music\n          </a>{' '}\n          is a minimalist piece written by{' '}\n          <a\n            href=\"https://en.wikipedia.org/wiki/Steve_Reich\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Steve Reich\n          </a>\n          . It is written for two performers and is performed entirely by\n          clapping.\n        </p>\n        <p>\n          For a live example, watch the{' '}\n          <a\n            href=\"https://www.youtube.com/watch?v=liYkRarIDfo\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            video performed by London Sinfonietta percussionists\n          </a>{' '}\n          David Hockings and Toby Kearney.\n        </p>\n        <p>\n          Developed by{' '}\n          <a href=\"https://github.com/alvaro-cuesta/\">Álvaro Cuesta</a>. Code\n          available on{' '}\n          <a href=\"https://github.com/alvaro-cuesta/reich\">GitHub</a>.\n        </p>\n      </section>\n\n      <section>\n        <h2>Instructions</h2>\n\n        <p>\n          Press \"START\" and wait for the initial count to 6, then clap as \"Clap\n          2\" by pressing \"Z\" in your keyboard.\n        </p>\n      </section>\n\n      <section>\n        <h2>Settings</h2>\n\n        <div className=\"controls\">\n          <fieldset className=\"tempo\">\n            <Input label=\"Tempo:\" {...tempo} />\n            <Input label=\"Repeats:\" {...repeats} />\n            <Input label=\"Swing:\" {...swing} />\n          </fieldset>\n\n          <fieldset>\n            <div className=\"noselect\">Sounds:</div>\n            <Input label=\"Clap 1\" {...clap1} />\n            <Input label=\"Clap 2\" {...clap2} />\n            <Input label=\"Metronome\" {...metronome} />\n            <Input label=\"Count\" {...countMetronome} />\n          </fieldset>\n        </div>\n      </section>\n\n      <main>\n        <PatternTable\n          buttonHandler={buttonHandler}\n          buttonLabel={buttonLabel}\n          clapPattern={CLAP_PATTERN}\n          pattern={pattern}\n          pulse={pulse}\n          repeats={repeats.value}\n          userInput={userInput}\n        />\n      </main>\n    </div>\n  )\n}\n\nApp.propTypes = {}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals'\n\nconst context = new AudioContext()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App context={context} />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}