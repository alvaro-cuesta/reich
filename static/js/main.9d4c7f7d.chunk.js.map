{"version":3,"sources":["smoothScroll.js","components/ClapRow.jsx","components/PatternTable.jsx","components/Input.jsx","business/Oscillator.js","business/util.js","business/tempo.js","business/ClapAudio.js","hooks/useInputInteger.js","hooks/useInputFloat.js","hooks/useInputCheckbox.js","components/App.jsx","reportWebVitals.js","index.js"],"names":["smoothScroll","element","position","duration","easingFn","originalPosition","scrollTop","dx","startTime","performance","now","requestAnimationFrame","scroll","dt","ClapRow","React","forwardRef","ref","clapPattern","head","shift","highlightPulse","currentPattern","donePattern","userInput","className","map","_","i","shifted","length","isClap","didntHit","undefined","colorClass","defaultProps","SCROLL_EASING","t","b","c","d","Math","sin","PI","PatternTable","buttonHandler","buttonLabel","pattern","pulse","repeats","originalPattern","rowsRef","useRef","scrollAnchorRef","scrollToPattern","useCallback","document","scrollingElement","current","offsetTop","patternRowsLength","useEffect","max","min","e","onClick","Array","fill","floor","Input","label","props","type","Oscillator","context","f","this","oscillator","createOscillator","frequency","value","gain","createGain","start","connect","destination","end","setValueAtTime","currentTime","cancelScheduledValues","disconnect","mathMod","n","mod","getSecsPerBeat","bpm","getTotalPulses","swing","totalBeats","getPulseStart","totalPulses","CLAP_LENGTH","ClapAudio","audioContext","clap1","clap2","metronome","countMetronome","onUpdate","clap1Osc","clap2Osc","metronomeOsc","lastPulse","stop","resume","schedule","maxPulses","schedulePulseSound","pulseStart","pulseEnd","isMetronome","isCountMetronome","scheduleFrequency","useInputInteger","key","step","defaultValue","parse","string","parseInt","Number","isInteger","useState","localStorage","getItem","setValue","handleChange","newValue","target","parsedValue","setItem","onChange","useInputFloat","parseFloat","isNaN","useInputCheckbox","checked","setChecked","newChecked","CLAP_PATTERN","CLAP1_KEYS","CLAP2_KEYS","App","state","setState","setUserInput","tempo","clapAudioRef","handleStart","handleStop","destroy","handleKeyDown","repeat","keyCode","timeStamp","eventTimeFix","secsPerBeat","currPulseDiff","nextPulseDiff","getPulseDiff","includes","console","log","hitTotalPulses","hitPulseDiff","window","addEventListener","removeEventListener","href","process","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AudioContext","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9d4c7f7d.chunk.js","sourcesContent":["// Easing fns\n// t: current time, b: begInnIng value, c: target value, d: duration\n\nexport const linearSmooth = (t, b, c, d) => (t / d) * c + b\nexport const easeOutCubic = (t, b, c, d) =>\n  c * ((t = t / d - 1) * t * t + 1) + b\nexport const easeOutSine = (t, b, c, d) =>\n  c * Math.sin((t / d) * (Math.PI / 2)) + b\n\nexport const smoothScroll = (element, position, duration, easingFn) => {\n  const originalPosition = element.scrollTop\n  const dx = position - element.scrollTop\n  const startTime = performance.now()\n\n  const scroll = () => {\n    const dt = performance.now() - startTime\n\n    if (dt > duration) {\n      element.scrollTop = position\n      return\n    }\n\n    element.scrollTop = easingFn(dt, originalPosition, dx, duration)\n\n    requestAnimationFrame(scroll)\n  }\n\n  requestAnimationFrame(scroll)\n}\n\nexport default smoothScroll\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ClapRow = React.forwardRef(\n  (\n    {\n      clapPattern,\n      head,\n      shift,\n      highlightPulse,\n      currentPattern,\n      donePattern,\n      userInput,\n      className,\n    },\n    ref,\n  ) => (\n    <div ref={ref} className={`clap-row ${className}`}>\n      <div className=\"head\">{head}</div>\n      <div className=\"pattern\">\n        {clapPattern.map((_, i) => {\n          const shifted = (i + shift) % clapPattern.length\n          const isClap = clapPattern[shifted]\n          let className = `cell pulse ${isClap ? 'clap' : 'silence'} ${\n            i === highlightPulse ? 'highlight' : ''\n          } `\n\n          const didntHit = userInput === undefined || userInput[i] === undefined\n          const colorClass = didntHit\n            ? 'no-hit'\n            : userInput[i] > 2 / 3\n            ? 'hit-bad'\n            : userInput[i] > 1 / 3\n            ? 'hit-ok'\n            : 'hit-good'\n\n          if (currentPattern) {\n            if (i < highlightPulse || (i === highlightPulse && !didntHit)) {\n              className += colorClass\n            }\n          } else if (donePattern || userInput !== undefined) {\n            className += colorClass\n          }\n\n          return <div key={i} className={className} />\n        })}\n      </div>\n    </div>\n  ),\n)\n\nClapRow.propTypes = {\n  head: PropTypes.string,\n  shift: PropTypes.number,\n  className: PropTypes.string,\n}\n\nClapRow.defaultProps = {\n  head: '',\n  shift: 0,\n  className: '',\n}\n\nexport default ClapRow\n","import { smoothScroll, easeOutSine } from '../smoothScroll'\n\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\n\nimport ClapRow from './ClapRow'\n\nconst EMPTY_ROWS = 1\nconst SCROLL_DURATION = 300\nconst SCROLL_EASING = easeOutSine\nconst OVERSCROLL_PX = 4\n\nconst PatternTable = ({\n  buttonHandler,\n  buttonLabel,\n  clapPattern,\n  pattern,\n  pulse,\n  repeats,\n  userInput,\n  className,\n}) => {\n  const originalPattern = pattern\n\n  if (pattern === undefined || pattern <= 0) pattern = 0\n\n  const rowsRef = useRef([])\n  const scrollAnchorRef = useRef(null)\n\n  const scrollToPattern = useCallback((i) => {\n    smoothScroll(\n      document.scrollingElement,\n      rowsRef.current[EMPTY_ROWS + i].offsetTop -\n        rowsRef.current[EMPTY_ROWS].offsetTop +\n        scrollAnchorRef.current.offsetTop +\n        OVERSCROLL_PX,\n      SCROLL_DURATION,\n      SCROLL_EASING,\n    )\n  }, [])\n\n  const patternRowsLength = (clapPattern.length + 1) * repeats\n\n  useEffect(() => {\n    if (originalPattern !== undefined) {\n      scrollToPattern(\n        Math.max(0, Math.min(patternRowsLength - 1, originalPattern)),\n      )\n    }\n  }, [originalPattern, scrollToPattern, patternRowsLength])\n\n  return (\n    <div\n      className={`pattern-table noselect ${className}`}\n      ref={(e) => {\n        scrollAnchorRef.current = e\n      }}\n    >\n      <div className=\"arrow-row\">\n        <div className=\"head\">\n          <button className=\"noselect\" onClick={buttonHandler}>\n            {buttonLabel}\n          </button>\n        </div>\n        <div className=\"pattern\">\n          {clapPattern.map((_, i) => (\n            <div key={i} className=\"cell arrow\">\n              {originalPattern >= -1 && i === pulse ? '▼' : ''}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"pattern-clap1\">\n        <ClapRow\n          clapPattern={clapPattern}\n          head={'Clap 1 ➡'}\n          shift={0}\n          highlightPulse={pulse}\n        />\n      </div>\n\n      <div className=\"pattern-clap2\">\n        {Array(EMPTY_ROWS)\n          .fill()\n          .map((_, i) => (\n            <ClapRow\n              key={i}\n              ref={(e) => {\n                rowsRef.current[i] = e\n              }}\n              clapPattern={clapPattern}\n              className=\"empty\"\n            />\n          ))}\n        {Array(patternRowsLength)\n          .fill()\n          .map((_, i) => (\n            <ClapRow\n              key={i}\n              ref={(e) => {\n                rowsRef.current[i + EMPTY_ROWS] = e\n              }}\n              clapPattern={clapPattern}\n              className={i === pattern ? 'highlight' : ''}\n              highlightPulse={i === pattern ? pulse : undefined}\n              head={i === pattern ? 'Clap 2 ➡' : ''}\n              shift={Math.floor(i / repeats)}\n              userInput={userInput[i]}\n              donePattern={i < originalPattern}\n              currentPattern={i === originalPattern}\n            />\n          ))}\n        <div className=\"padder\">\n          <div className=\"head\" />\n          <div className=\"pattern empty\">\n            {clapPattern.map((_, i) => {\n              return <div key={i} className=\"cell pulse\" />\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nPatternTable.propTypes = {\n  className: PropTypes.string,\n}\n\nPatternTable.defaultProps = {\n  className: '',\n}\n\nexport default PatternTable\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Input = ({ label, ...props }) => (\n  <label>\n    {props.type !== 'checkbox' ? (\n      <span className=\"label noselect\">{label}</span>\n    ) : null}\n    <input {...props} />\n    {props.type === 'checkbox' ? (\n      <span className=\"label noselect\">{label}</span>\n    ) : null}\n  </label>\n)\n\nInput.propTypes = {\n  label: PropTypes.string,\n}\n\nexport default Input\n","export default class Oscillator {\n  constructor(context, f) {\n    this.f = f\n    this.context = context\n\n    this.oscillator = context.createOscillator()\n    this.oscillator.type = 'square'\n    this.oscillator.frequency.value = f\n\n    this.gain = context.createGain()\n    this.gain.gain.value = 0\n\n    this.oscillator.start()\n    this.oscillator.connect(this.gain)\n\n    this.gain.connect(context.destination)\n  }\n\n  schedule(gain, start, end) {\n    this.gain.gain.setValueAtTime(gain, start)\n    this.gain.gain.setValueAtTime(0, end)\n  }\n\n  scheduleFrequency(frequency, start) {\n    this.oscillator.frequency.setValueAtTime(frequency, start)\n  }\n\n  cancelScheduledValues() {\n    const now = this.context.currentTime\n\n    this.oscillator.frequency.cancelScheduledValues(now)\n    this.gain.gain.cancelScheduledValues(now)\n\n    this.gain.gain.value = 0\n    this.oscillator.frequency.value = this.f\n  }\n\n  disconnect() {\n    this.gain.disconnect()\n    this.oscillator.disconnect()\n  }\n}\n","export const mathMod = (n, mod) => (mod + (n % mod)) % mod\r\n","import { mathMod } from './util'\r\n\r\nconst PULSES_PER_BEAT = 2\r\n\r\nexport const getSecsPerBeat = (bpm) => 60 / bpm\r\n\r\nexport const getTotalPulses = (bpm, swing, startTime, currentTime) => {\r\n  const totalBeats = (currentTime - startTime) / getSecsPerBeat(bpm)\r\n\r\n  const totalPulses =\r\n    Math.floor(totalBeats) * PULSES_PER_BEAT +\r\n    (mathMod(totalBeats, 1) < swing ? 0 : 1)\r\n\r\n  return totalPulses\r\n}\r\n\r\nexport const getPulseStart = (bpm, swing, startTime, totalPulses) => {\r\n  const totalBeats =\r\n    Math.floor(totalPulses / PULSES_PER_BEAT) +\r\n    (totalPulses % PULSES_PER_BEAT === 0 ? 0 : swing)\r\n\r\n  return startTime + totalBeats * getSecsPerBeat(bpm)\r\n}\r\n\r\nexport const getPulseDiff = (bpm, swing, startTime, currentTime) => {\r\n  const totalPulses = getTotalPulses(bpm, swing, startTime, currentTime)\r\n\r\n  const secsPerBeat = getSecsPerBeat(bpm)\r\n\r\n  const currPulseDiff =\r\n    (currentTime - getPulseStart(bpm, swing, startTime, totalPulses)) /\r\n    (secsPerBeat * swing)\r\n\r\n  const nextPulseDiff =\r\n    (getPulseStart(bpm, swing, startTime, totalPulses + 1) - currentTime) /\r\n    (secsPerBeat * (1 - swing))\r\n\r\n  return {\r\n    currPulseDiff,\r\n    nextPulseDiff,\r\n  }\r\n}\r\n","import Oscillator from './Oscillator'\r\nimport { getPulseStart, getTotalPulses, getSecsPerBeat } from './tempo'\r\nimport { mathMod } from './util'\r\n\r\nconst CLAP_LENGTH = 0.0125\r\nconst CLAP1_F = 440\r\nconst CLAP2_F = 230\r\nconst METRONOME_F = 890\r\nconst METRONOME_ACCENT_F = 1780\r\nconst ACCENT_GAIN = 1\r\nconst GAIN = 0.25\r\n\r\nexport default class ClapAudio {\r\n  constructor(\r\n    audioContext,\r\n    clapPattern,\r\n    bpm,\r\n    repeats,\r\n    swing,\r\n    clap1,\r\n    clap2,\r\n    metronome,\r\n    countMetronome,\r\n    onUpdate,\r\n  ) {\r\n    this.audioContext = audioContext\r\n    this.clapPattern = clapPattern\r\n\r\n    this.clap1Osc = new Oscillator(this.audioContext, CLAP1_F)\r\n    this.clap2Osc = new Oscillator(this.audioContext, CLAP2_F)\r\n    this.metronomeOsc = new Oscillator(this.audioContext, METRONOME_ACCENT_F)\r\n\r\n    this.startTime = null\r\n    this.lastPulse = null\r\n\r\n    this.bpm = bpm\r\n    this.repeats = repeats\r\n    this.swing = swing\r\n\r\n    this.clap1 = clap1\r\n    this.clap2 = clap2\r\n    this.metronome = metronome\r\n    this.countMetronome = countMetronome\r\n\r\n    this.onUpdate = onUpdate\r\n  }\r\n\r\n  start() {\r\n    this.stop()\r\n\r\n    this.audioContext.resume()\r\n\r\n    this.startTime =\r\n      this.audioContext.currentTime +\r\n      (getSecsPerBeat(this.bpm) / 2) * this.clapPattern.length\r\n\r\n    if (this.countMetronome) {\r\n      this.metronomeOsc.schedule(\r\n        ACCENT_GAIN,\r\n        this.startTime,\r\n        this.startTime + CLAP_LENGTH,\r\n      )\r\n    }\r\n\r\n    this.onUpdate(this.startTime, this.startTime)\r\n\r\n    const schedule = () => {\r\n      this.schedule()\r\n\r\n      if (this.startTime !== null) {\r\n        requestAnimationFrame(schedule)\r\n      }\r\n    }\r\n\r\n    requestAnimationFrame(schedule)\r\n  }\r\n\r\n  stop() {\r\n    this.startTime = null\r\n    this.lastPulse = null\r\n\r\n    this.clap1Osc.cancelScheduledValues()\r\n    this.clap2Osc.cancelScheduledValues()\r\n    this.metronomeOsc.cancelScheduledValues()\r\n\r\n    this.onUpdate(null, null)\r\n  }\r\n\r\n  destroy() {\r\n    this.stop()\r\n\r\n    this.clap1Osc.disconnect()\r\n    this.clap2Osc.disconnect()\r\n    this.metronomeOsc.disconnect()\r\n  }\r\n\r\n  //\r\n\r\n  schedule() {\r\n    if (this.startTime === null) {\r\n      return\r\n    }\r\n\r\n    const totalPulses = getTotalPulses(\r\n      this.bpm,\r\n      this.swing,\r\n      this.startTime,\r\n      this.audioContext.currentTime,\r\n    )\r\n\r\n    const maxPulses =\r\n      (this.clapPattern.length + 1) * this.repeats * this.clapPattern.length\r\n\r\n    // After last pulse, auto stop\r\n    if (totalPulses >= maxPulses) {\r\n      this.stop()\r\n      return\r\n    }\r\n\r\n    // Pulse already scheduled, bail out\r\n    if (totalPulses === this.lastPulse) {\r\n      return\r\n    }\r\n\r\n    this.lastPulse = totalPulses\r\n\r\n    // Schedule _next_ pulse\r\n    const nextPulse = totalPulses + 1\r\n\r\n    if (nextPulse >= maxPulses) {\r\n      return\r\n    }\r\n\r\n    this.schedulePulseSound(totalPulses + 1)\r\n\r\n    this.onUpdate(this.startTime, this.audioContext.currentTime)\r\n  }\r\n\r\n  schedulePulseSound(totalPulses) {\r\n    const pattern = Math.floor(totalPulses / this.clapPattern.length)\r\n    const pulse = mathMod(totalPulses, this.clapPattern.length)\r\n\r\n    const pulseStart = getPulseStart(\r\n      this.bpm,\r\n      this.swing,\r\n      this.startTime,\r\n      totalPulses,\r\n    )\r\n    const pulseEnd = pulseStart + CLAP_LENGTH\r\n    const gain = pulse === 0 ? ACCENT_GAIN : GAIN\r\n\r\n    if (pattern >= 0) {\r\n      if (this.clap1 && this.clapPattern[pulse % this.clapPattern.length]) {\r\n        this.clap1Osc.schedule(gain, pulseStart, pulseEnd)\r\n      }\r\n\r\n      const shift = Math.floor(pattern / this.repeats)\r\n      if (\r\n        this.clap2 &&\r\n        this.clapPattern[(shift + pulse) % this.clapPattern.length]\r\n      ) {\r\n        this.clap2Osc.schedule(gain, pulseStart, pulseEnd)\r\n      }\r\n    }\r\n\r\n    const isMetronome = this.metronome && pattern >= 0 && pulse % 2 === 0\r\n\r\n    const isCountMetronome =\r\n      this.countMetronome && pattern === -1 && pulse % 2 === 0\r\n\r\n    if (isMetronome || isCountMetronome) {\r\n      this.metronomeOsc.scheduleFrequency(\r\n        pulse === 0 ? METRONOME_ACCENT_F : METRONOME_F,\r\n        pulseStart,\r\n      )\r\n\r\n      this.metronomeOsc.schedule(gain, pulseStart, pulseEnd)\r\n    }\r\n  }\r\n}\r\n","import { useCallback, useState } from 'react'\r\n\r\nconst useInputInteger = (\r\n  key,\r\n  { min, max, step } = {},\r\n  defaultValue = undefined,\r\n) => {\r\n  const parse = useCallback(\r\n    (string) => {\r\n      let value = parseInt(string, 10)\r\n\r\n      if (!Number.isInteger(value)) {\r\n        return defaultValue\r\n      }\r\n\r\n      if (min !== undefined) {\r\n        value = Math.max(min, value)\r\n      }\r\n\r\n      if (max !== undefined) {\r\n        value = Math.min(max, value)\r\n      }\r\n\r\n      return value\r\n    },\r\n    [min, max, defaultValue],\r\n  )\r\n\r\n  const [value, setValue] = useState(() => parse(localStorage.getItem(key)))\r\n\r\n  const handleChange = useCallback(\r\n    ({ target: { value: newValue } }) => {\r\n      const parsedValue = parse(newValue)\r\n\r\n      localStorage.setItem(key, parsedValue)\r\n      setValue(parsedValue)\r\n    },\r\n    [key, parse],\r\n  )\r\n\r\n  return {\r\n    type: 'number',\r\n    min,\r\n    max,\r\n    step,\r\n    value,\r\n    onChange: handleChange,\r\n  }\r\n}\r\n\r\nexport default useInputInteger\r\n","import { useCallback, useState } from 'react'\r\n\r\nconst useInputFloat = (\r\n  key,\r\n  { min, max, step } = {},\r\n  defaultValue = undefined,\r\n) => {\r\n  const parse = useCallback(\r\n    (string) => {\r\n      let value = parseFloat(string, 10)\r\n\r\n      if (typeof value !== 'number' || isNaN(value)) {\r\n        return defaultValue\r\n      }\r\n\r\n      if (min !== undefined) {\r\n        value = Math.max(min, value)\r\n      }\r\n\r\n      if (max !== undefined) {\r\n        value = Math.min(max, value)\r\n      }\r\n\r\n      return value\r\n    },\r\n    [min, max, defaultValue],\r\n  )\r\n\r\n  const [value, setValue] = useState(() => parse(localStorage.getItem(key)))\r\n\r\n  const handleChange = useCallback(\r\n    ({ target: { value: newValue } }) => {\r\n      const parsedValue = parse(newValue)\r\n\r\n      localStorage.setItem(key, parsedValue)\r\n      setValue(parsedValue)\r\n    },\r\n    [key, parse],\r\n  )\r\n\r\n  return {\r\n    type: 'number',\r\n    min,\r\n    max,\r\n    step,\r\n    value,\r\n    onChange: handleChange,\r\n  }\r\n}\r\n\r\nexport default useInputFloat\r\n","import { useCallback, useState } from 'react'\r\n\r\nconst useInputCheckbox = (key, defaultValue = false) => {\r\n  const parse = useCallback(\r\n    (string) =>\r\n      string === true || string === 'true'\r\n        ? true\r\n        : string === false || string === 'false'\r\n        ? false\r\n        : defaultValue,\r\n    [defaultValue],\r\n  )\r\n\r\n  const [checked, setChecked] = useState(() => parse(localStorage.getItem(key)))\r\n\r\n  const handleChange = useCallback(\r\n    ({ target: { checked } }) => {\r\n      const newChecked = parse(checked)\r\n\r\n      localStorage.setItem(key, newChecked)\r\n      setChecked(newChecked)\r\n    },\r\n    [key, parse],\r\n  )\r\n\r\n  return {\r\n    type: 'checkbox',\r\n    checked,\r\n    onChange: handleChange,\r\n  }\r\n}\r\n\r\nexport default useInputCheckbox\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\n\nimport PatternTable from './PatternTable'\nimport Input from './Input'\n\nimport ClapAudio from '../business/ClapAudio'\n\nimport useInputInteger from '../hooks/useInputInteger'\nimport useInputFloat from '../hooks/useInputFloat'\nimport useInputCheckbox from '../hooks/useInputCheckbox'\nimport { getPulseDiff, getTotalPulses } from '../business/tempo'\nimport { mathMod } from '../business/util'\n\nconst CLAP_PATTERN = [\n  true,\n  true,\n  true,\n  false,\n  true,\n  true,\n  false,\n  true,\n  false,\n  true,\n  true,\n  false,\n]\nconst CLAP1_KEYS = [90]\nconst CLAP2_KEYS = [77]\n\nconst App = ({ context }) => {\n  const [state, setState] = useState({\n    startTime: null,\n    now: null,\n  })\n\n  const [userInput, setUserInput] = useState([])\n\n  const tempo = useInputInteger('tempo', { min: 1, max: 999, step: 1 }, 120)\n  const repeats = useInputInteger('repeats', { min: 1, max: 999, step: 1 }, 4)\n  const swing = useInputFloat('swing', { min: 0.1, max: 0.9, step: 0.01 }, 0.5)\n  const clap1 = useInputCheckbox('clap1', true)\n  const clap2 = useInputCheckbox('clap2', true)\n  const metronome = useInputCheckbox('metronome', false)\n  const countMetronome = useInputCheckbox('countMetronome', true)\n\n  const clapAudioRef = useRef()\n\n  const handleStart = useCallback(() => {\n    clapAudioRef.current.start()\n    setUserInput([])\n  }, [])\n\n  const handleStop = useCallback(() => {\n    clapAudioRef.current.stop()\n  }, [])\n\n  // TODO: Propagate states to ref\n\n  useEffect(() => {\n    clapAudioRef.current = new ClapAudio(\n      context,\n      CLAP_PATTERN,\n      tempo.value,\n      repeats.value,\n      swing.value,\n      clap1.checked,\n      clap2.checked,\n      metronome.checked,\n      countMetronome.checked,\n      (startTime, now) => {\n        setState({ startTime, now })\n      },\n    )\n\n    return () => {\n      clapAudioRef.current.destroy()\n    }\n\n    // HACK? We just want the initial values for the clap audio\n    //       See below for how we synchronize\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [context])\n\n  // HACK? This should probably be part of the `onChange` handlers\n  useEffect(() => {\n    clapAudioRef.current.bpm = tempo.value\n  }, [tempo.value])\n\n  useEffect(() => {\n    clapAudioRef.current.repeats = repeats.value\n  }, [repeats.value])\n\n  useEffect(() => {\n    clapAudioRef.current.swing = swing.value\n  }, [swing.value])\n\n  useEffect(() => {\n    clapAudioRef.current.clap1 = clap1.checked\n  }, [clap1.checked])\n\n  useEffect(() => {\n    clapAudioRef.current.clap2 = clap2.checked\n  }, [clap2.checked])\n\n  useEffect(() => {\n    clapAudioRef.current.metronome = metronome.checked\n  }, [metronome.checked])\n\n  useEffect(() => {\n    clapAudioRef.current.countMetronome = countMetronome.checked\n  }, [countMetronome.checked])\n\n  //\n\n  useEffect(() => {\n    const handleKeyDown = ({ repeat, key, keyCode, timeStamp }) => {\n      if (repeat) {\n        return\n      }\n\n      if (state.startTime === null) {\n        return\n      }\n\n      const totalPulses = getTotalPulses(\n        tempo.value,\n        swing.value,\n        state.startTime,\n        context.currentTime,\n      )\n\n      const eventTimeFix = (performance.now() - timeStamp) / 1000\n\n      const { currPulseDiff, nextPulseDiff } = getPulseDiff(\n        tempo.value,\n        swing.value,\n        state.startTime,\n        context.currentTime - eventTimeFix,\n      )\n\n      if (CLAP1_KEYS.includes(keyCode)) {\n        console.log('clap1', currPulseDiff, nextPulseDiff)\n\n        setUserInput((userInput) => {\n          const hitTotalPulses =\n            totalPulses + (currPulseDiff >= nextPulseDiff ? 1 : 0)\n          const hitPulseDiff =\n            currPulseDiff >= nextPulseDiff ? nextPulseDiff : currPulseDiff\n\n          const pattern = Math.floor(hitTotalPulses / CLAP_PATTERN.length)\n          const pulse = mathMod(hitTotalPulses, CLAP_PATTERN.length)\n\n          userInput = [...userInput]\n          userInput[pattern] = [...(userInput[pattern] || [])]\n          userInput[pattern][pulse] = hitPulseDiff\n\n          return userInput\n        })\n      } else if (CLAP2_KEYS.includes(keyCode)) {\n        console.log('clap2', currPulseDiff, nextPulseDiff)\n      } else {\n        console.log(key, keyCode)\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown, false)\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown, false)\n    }\n  }, [tempo.value, swing.value, state.startTime, context])\n\n  // RENDER\n\n  let pattern, pulse\n  if (state.startTime !== null) {\n    const totalPulses = getTotalPulses(\n      tempo.value,\n      swing.value,\n      state.startTime,\n      context.currentTime,\n    )\n\n    pattern = Math.floor(totalPulses / CLAP_PATTERN.length)\n    pulse = mathMod(totalPulses, CLAP_PATTERN.length)\n  }\n\n  let buttonHandler, buttonLabel\n  if (pattern === undefined) {\n    buttonHandler = handleStart\n    buttonLabel = 'Start'\n  } else if (pattern < 0) {\n    buttonHandler = handleStop\n    buttonLabel = Math.floor(pulse / 2) + 1\n  } else {\n    buttonHandler = handleStop\n    buttonLabel = 'Stop'\n  }\n\n  return (\n    <div className=\"reich-app\">\n      <header>\n        <h1>\n          <a href={process.env.PUBLIC_URL}>Reich Clapping Trainer</a>\n        </h1>\n      </header>\n\n      <section>\n        <p>\n          <a\n            href=\"https://en.wikipedia.org/wiki/Clapping_Music\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Clapping Music\n          </a>{' '}\n          is a minimalist piece written by{' '}\n          <a\n            href=\"https://en.wikipedia.org/wiki/Steve_Reich\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Steve Reich\n          </a>\n          . It is written for two performers and is performed entirely by\n          clapping.\n        </p>\n        <p>\n          For a live example, watch the{' '}\n          <a\n            href=\"https://www.youtube.com/watch?v=liYkRarIDfo\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            video performed by London Sinfonietta percussionists\n          </a>{' '}\n          David Hockings and Toby Kearney.\n        </p>\n        <p>\n          Developed by{' '}\n          <a href=\"https://github.com/alvaro-cuesta/\">Álvaro Cuesta</a>. Code\n          available on{' '}\n          <a href=\"https://github.com/alvaro-cuesta/reich\">GitHub</a>.\n        </p>\n      </section>\n\n      <section>\n        <h2>Instructions</h2>\n\n        <p>\n          Press \"START\" and wait for the initial count to 6, then clap as \"Clap\n          2\" by pressing \"Z\" in your keyboard.\n        </p>\n      </section>\n\n      <section>\n        <h2>Settings</h2>\n\n        <div className=\"controls\">\n          <fieldset className=\"tempo\">\n            <Input label=\"Tempo:\" {...tempo} />\n            <Input label=\"Repeats:\" {...repeats} />\n            <Input label=\"Swing:\" {...swing} />\n          </fieldset>\n\n          <fieldset>\n            <div className=\"noselect\">Sounds:</div>\n            <Input label=\"Clap 1\" {...clap1} />\n            <Input label=\"Clap 2\" {...clap2} />\n            <Input label=\"Metronome\" {...metronome} />\n            <Input label=\"Count\" {...countMetronome} />\n          </fieldset>\n        </div>\n      </section>\n\n      <main>\n        <PatternTable\n          buttonHandler={buttonHandler}\n          buttonLabel={buttonLabel}\n          clapPattern={CLAP_PATTERN}\n          pattern={pattern}\n          pulse={pulse}\n          repeats={repeats.value}\n          userInput={userInput}\n        />\n      </main>\n    </div>\n  )\n}\n\nApp.propTypes = {}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals'\n\nconst context = new AudioContext()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App context={context} />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}