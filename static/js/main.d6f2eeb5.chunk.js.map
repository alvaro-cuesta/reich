{"version":3,"sources":["smoothScroll.js","components/ClapRow.jsx","components/PatternTable.jsx","components/Input.jsx","Oscillator.js","components/App.jsx","reportWebVitals.js","index.js"],"names":["smoothScroll","element","position","duration","easingFn","originalPosition","scrollTop","dx","startTime","performance","now","requestAnimationFrame","scroll","dt","ClapRow","React","forwardRef","ref","clapPattern","head","shift","highlightPulse","currentPattern","donePattern","userInput","className","map","_","i","shifted","length","isClap","didntHit","undefined","colorClass","defaultProps","SCROLL_EASING","t","b","c","d","Math","sin","PI","PatternTable","buttonHandler","buttonLabel","pattern","pulse","repeats","originalPattern","rowsRef","useRef","scrollAnchorRef","isFirstRenderRef","scrollToPattern","useCallback","document","scrollingElement","current","offsetTop","offsetHeight","useEffect","e","onClick","Array","apply","floor","Input","label","props","type","Oscillator","context","f","this","oscillator","createOscillator","frequency","value","gain","createGain","start","connect","destination","end","setValueAtTime","currentTime","cancelScheduledValues","disconnect","CLAP_PATTERN","CLAP_LENGTH","CLAP1_KEYS","CLAP2_KEYS","localStorageGet","key","parser","defaultVal","result","localStorage","getItem","parseBool","useHandleSetting","setState","x","target","checked","setItem","state","App","useState","tempo","parseInt","swing","parseFloat","clap1","clap2","metronome","countMetronome","clap1Ref","clap2Ref","metronomeRef","timeIntervalRef","lastPulseRef","timeStampRef","secsPerBeat","handleStop","clearInterval","getPosition","totalBeats","totalPulses","getPulseStart","schedulePulseSound","instant","pulseStart","pulseEnd","schedule","scheduleFrequency","handleStart","timeStamp","resume","setInterval","getPulseDiff","delta","currPulseDiff","nextPulseDiff","handleKeyDown","repeat","keyCode","includes","console","log","window","addEventListener","removeEventListener","min","max","step","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AudioContext","ReactDOM","render","StrictMode","getElementById"],"mappings":"4LASaA,EAAe,SAACC,EAASC,EAAUC,EAAUC,GACxD,IAAIC,EAAmBJ,EAAQK,UAC3BC,EAAKL,EAAWD,EAAQK,UACxBE,EAAYC,YAAYC,MAe5BC,uBAba,SAATC,IACF,IAAIC,EAAKJ,YAAYC,MAAQF,EAEzBK,EAAKV,EACPF,EAAQK,UAAYJ,GAItBD,EAAQK,UAAYF,EAASS,EAAIR,EAAkBE,EAAIJ,GAEvDQ,sBAAsBC,Q,OCrBpBE,EAAUC,IAAMC,YACpB,WAWEC,GAXF,IAEIC,EAFJ,EAEIA,YACAC,EAHJ,EAGIA,KACAC,EAJJ,EAIIA,MACAC,EALJ,EAKIA,eACAC,EANJ,EAMIA,eACAC,EAPJ,EAOIA,YACAC,EARJ,EAQIA,UACAC,EATJ,EASIA,UATJ,OAaE,sBAAKR,IAAKA,EAAKQ,UAAS,mBAAcA,GAAtC,UACE,qBAAKA,UAAU,OAAf,SAAuBN,IACvB,qBAAKM,UAAU,UAAf,SACGP,EAAYQ,KAAI,SAACC,EAAGC,GACnB,IAAIC,GAAWD,EAAIR,GAASF,EAAYY,OACpCC,EAASb,EAAYW,GACrBJ,EAAS,qBAAiBM,EAAS,OAAS,UAAnC,YACXH,IAAMP,EAAiB,YAAc,GAD1B,KAITW,OAAyBC,IAAdT,QAA4CS,IAAjBT,EAAUI,GAChDM,EAAaF,EACb,SACAR,EAAUI,GAAK,EAAI,EACnB,UACAJ,EAAUI,GAAK,EAAI,EACnB,SACA,WAUJ,OARIN,GACEM,EAAIP,GAAmBO,IAAMP,IAAmBW,KAClDP,GAAaS,IAENX,QAA6BU,IAAdT,KACxBC,GAAaS,GAGR,qBAAaT,UAAWA,GAAdG,cAa3Bd,EAAQqB,aAAe,CACrBhB,KAAM,GACNC,MAAO,EACPK,UAAW,IAGEX,QCtDTsB,EFHqB,SAACC,EAAGC,EAAGC,EAAGC,GAAV,OACzBD,EAAIE,KAAKC,IAAKL,EAAIG,GAAMC,KAAKE,GAAK,IAAML,GEIpCM,EAAe,SAAC,GASf,IARLC,EAQI,EARJA,cACAC,EAOI,EAPJA,YACA5B,EAMI,EANJA,YACA6B,EAKI,EALJA,QACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAzB,EAEI,EAFJA,UACAC,EACI,EADJA,UAEIyB,EAAkBH,QAENd,IAAZc,GAAyBA,GAAW,KAAGA,EAAU,GAErD,IAAMI,EAAUC,iBAAO,IACjBC,EAAkBD,iBAAO,MACzBE,EAAmBF,kBAAO,GAE1BG,EAAkBC,uBAAY,SAAC5B,GACnC5B,EACEyD,SAASC,iBACTP,EAAQQ,QAAQ/B,GAAGgC,UACjBP,EAAgBM,QAAQC,UACxBT,EAAQQ,QAAQ/B,GAAGiC,aACR,EA3BK,IA6BlBzB,KAED,IAmBH,OAhBA0B,qBAAU,WACRT,EAAgBM,QAAQrD,UACtB6C,EAAQQ,QAAQ,GAChBN,EAAgBM,QAAQC,UACxBT,EAAQQ,QAAQ,GAAGE,aACnB,IACD,IAEHC,qBAAU,WACJR,EAAiBK,QACnBL,EAAiBK,SAAU,EAE3BJ,OAA4BtB,IAAZc,GAAyBA,GAAW,EAAI,EAAIA,KAE7D,CAACA,EAASQ,IAGX,sBACE9B,UAAS,iCAA4BA,GACrCR,IAAK,SAAC8C,GACJV,EAAgBM,QAAUI,GAH9B,UAME,sBAAKtC,UAAU,YAAf,UACE,qBAAKA,UAAU,OAAf,SACE,wBAAQA,UAAU,WAAWuC,QAASnB,EAAtC,SACGC,MAGL,qBAAKrB,UAAU,UAAf,SACGP,EAAYQ,KAAI,SAACC,EAAGC,GAAJ,OACf,qBAAaH,UAAU,aAAvB,SACGyB,IAAoB,GAAKtB,IAAMoB,EAAQ,SAAM,IADtCpB,WAOhB,qBAAKH,UAAU,gBAAf,SACE,cAAC,EAAD,CACEP,YAAaA,EACbC,KAAM,gBACNC,MAAO,EACPC,eAAgB2B,MAIpB,sBAAKvB,UAAU,gBAAf,UACGwC,MAAMC,MAAM,KAAM,CAAEpC,OAnFV,IAmFgCJ,KAAI,SAACC,EAAGC,GAAJ,OAC7C,cAAC,EAAD,CAEEX,IAAK,SAAC8C,GACJZ,EAAQQ,QAAQ/B,GAAKmC,GAEvB7C,YAAaA,EACbO,UAAU,SALLG,MAQRqC,MAAMC,MAAM,KAAM,CACjBpC,QAASZ,EAAYY,OAAS,GAAKmB,IAClCvB,KAAI,SAACC,EAAGC,GAAJ,OACL,cAAC,EAAD,CAEEX,IAAK,SAAC8C,GACJZ,EAAQQ,QAAQ/B,EAnGX,GAmG6BmC,GAEpC7C,YAAaA,EACbO,UAAWG,IAAMmB,EAAU,YAAc,GACzC1B,eAAgBO,IAAMmB,EAAUC,OAAQf,EACxCd,KAAMS,IAAMmB,EAAU,gBAAa,GACnC3B,MAAOqB,KAAK0B,MAAMvC,EAAIqB,GACtBzB,UAAWA,EAAUI,GACrBL,YAAaK,EAAIsB,EACjB5B,eAAgBM,IAAMsB,GAXjBtB,MAcT,sBAAKH,UAAU,SAAf,UACE,qBAAKA,UAAU,SACf,qBAAKA,UAAU,gBAAf,SACGP,EAAYQ,KAAI,SAACC,EAAGC,GACnB,OAAO,qBAAaH,UAAU,cAAbG,kBAa/BgB,EAAaT,aAAe,CAC1BV,UAAW,IAGEmB,Q,OCxHAwB,EAhBD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAUC,EAAb,gCACZ,kCACkB,aAAfA,EAAMC,KACL,sBAAM9C,UAAU,iBAAhB,SAAkC4C,IAChC,KACJ,qCAAWC,IACK,aAAfA,EAAMC,KACL,sBAAM9C,UAAU,iBAAhB,SAAkC4C,IAChC,S,cCXaG,E,WACnB,WAAYC,EAASC,GAAI,oBACvBC,KAAKD,EAAIA,EACTC,KAAKF,QAAUA,EAEfE,KAAKC,WAAaH,EAAQI,mBAC1BF,KAAKC,WAAWL,KAAO,SACvBI,KAAKC,WAAWE,UAAUC,MAAQL,EAElCC,KAAKK,KAAOP,EAAQQ,aACpBN,KAAKK,KAAKA,KAAKD,MAAQ,EAEvBJ,KAAKC,WAAWM,QAChBP,KAAKC,WAAWO,QAAQR,KAAKK,MAE7BL,KAAKK,KAAKG,QAAQV,EAAQW,a,4CAG5B,SAASJ,EAAME,EAAOG,GACpBV,KAAKK,KAAKA,KAAKM,eAAeN,EAAME,GACpCP,KAAKK,KAAKA,KAAKM,eAAe,EAAGD,K,+BAGnC,SAAkBP,EAAWI,GAC3BP,KAAKC,WAAWE,UAAUQ,eAAeR,EAAWI,K,mCAGtD,WACE,IAAIxE,EAAMiE,KAAKF,QAAQc,YAEvBZ,KAAKC,WAAWE,UAAUU,sBAAsB9E,GAChDiE,KAAKK,KAAKA,KAAKQ,sBAAsB9E,GAErCiE,KAAKK,KAAKA,KAAKD,MAAQ,EACvBJ,KAAKC,WAAWE,UAAUC,MAAQJ,KAAKD,I,wBAGzC,WACEC,KAAKK,KAAKS,aACVd,KAAKC,WAAWa,iB,KChCdC,EAAe,EACnB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GAEIC,EAAc,MAOdC,EAAa,CAAC,IACdC,EAAa,CAAC,IAEdC,EAAkB,SAACC,EAAKC,EAAQC,GACpC,IAAIC,EAASC,aAAaC,QAAQL,GAClC,OAAkB,OAAXG,EAAkBF,EAAOE,GAAUD,GAGtCI,EAAY,SAAC/D,GAAD,MAAa,SAANA,GAEnBgE,EAAmB,SAACC,EAAUR,EAAKrB,GAKvC,MAJiB,qBAANA,IACTA,EAAI,SAAC8B,GAAD,OAAOA,IAGNhD,uBACL,YAA2C,IAAD,IAAvCiD,OAAUlC,EAA6B,EAA7BA,KAAMQ,EAAuB,EAAvBA,MAAO2B,EAAgB,EAAhBA,QACX,aAATnC,GACF4B,aAAaQ,QAAQZ,EAAKW,GAC1BH,GAAS,SAACK,GAAD,mBAAC,eAAgBA,GAAjB,4BAA4Bb,GAAQrB,EAAEgC,UAE/CP,aAAaQ,QAAQZ,EAAKhB,GAC1BwB,GAAS,SAACK,GAAD,mBAAC,eAAgBA,GAAjB,4BAA4Bb,GAAQrB,EAAEK,WAGnD,CAACwB,EAAUR,EAAKrB,KAkYLmC,EA9XH,SAAC,GAAiB,IAAfpC,EAAc,EAAdA,QAAc,EACDqC,mBAAS,CACjCC,MAAOjB,EAAgB,QAASkB,SAAU,KAC1C/D,QAAS6C,EAAgB,UAAWkB,SAAU,GAC9CC,MAAOnB,EAAgB,QAASoB,WAAY,IAC5CC,MAAOrB,EAAgB,QAASO,GAAW,GAC3Ce,MAAOtB,EAAgB,QAASO,GAAW,GAC3CgB,UAAWvB,EAAgB,YAAaO,GAAW,GACnDiB,eAAgBxB,EAAgB,iBAAkBO,GAAW,GAC7D7F,WAAW,EACXE,KAAK,EACLc,WAAW,IAXc,mBACpBoF,EADoB,KACbL,EADa,KAezBQ,EAQEH,EARFG,MACA9D,EAOE2D,EAPF3D,QACAgE,EAMEL,EANFK,MACAE,EAKEP,EALFO,MACAC,EAIER,EAJFQ,MACAC,EAGET,EAHFS,UACAC,EAEEV,EAFFU,eACA9F,EACEoF,EADFpF,UAGI+F,EAAWnE,iBAAO,MAClBoE,EAAWpE,iBAAO,MAClBqE,EAAerE,iBAAO,MACtBsE,EAAkBtE,iBAAO,MACzBuE,EAAevE,iBAAO,MACtBwE,EAAexE,iBAAO,MAEtByE,EAAc,GAAKjB,EAAMG,MAEzBe,EAAatE,uBAAY,WAC7BuE,cAAcL,EAAgB/D,SAE9B4D,EAAS5D,QAAQ6B,wBACjBgC,EAAS7D,QAAQ6B,wBACjBiC,EAAa9D,QAAQ6B,wBAErBe,GAAS,SAACK,GAAD,mBAAC,eACLA,GADI,IAEPpG,WAAW,EACXE,KAAK,SAEN,IAEGsH,EAAcxE,uBAAY,WAC9B,IAAIhD,EAAYoG,EAAMpG,UAClByG,EAAQL,EAAMK,MACdvG,EAAMkG,EAAMlG,IAEhB,IAAkB,IAAdF,EAAqB,MAAO,GAEhC,IAAIyH,GAAcvH,EAAMF,GAAaqH,EAEjCK,EACuB,EAAzBzF,KAAK0B,MAAM8D,KAAoB,EAAKA,EAAa,GAAM,EAAIhB,EAAQ,EAAI,GAIzE,GAAIzG,GAAaE,EAAK,CAEpB,IADA,IAAIsC,EAAQkF,EACLlF,EAAQ,GAAGA,GAAS0C,EAAa5D,OAExC,MAAO,CACLiB,QAASN,KAAK0B,MAAM+D,EAAcxC,EAAa5D,QAC/CkB,QACAkF,eAIJ,MAAO,CACLnF,QAASN,KAAK0B,MAAM+D,EAAcxC,EAAa5D,QAC/CkB,MAAOkF,EAAcxC,EAAa5D,OAClCoG,iBAED,CAACL,EAAajB,EAAMpG,UAAWoG,EAAMK,MAAOL,EAAMlG,MAE/CyH,EAAgB3E,uBACpB,SAAC0E,GACC,IAAI1H,EAAYoG,EAAMpG,UAClByG,EAAQL,EAAMK,MAKlB,OAAOzG,GAFLiC,KAAK0B,MAAM+D,EAAc,IAAMA,EAAc,IAAM,EAAI,EAAIjB,IAE7BY,IAElC,CAACA,EAAajB,EAAMpG,UAAWoG,EAAMK,QAGjCmB,EAAqB5E,uBACzB,SAACR,EAAOD,EAASmF,EAAaG,GAC5B,IAAIlB,EAAQP,EAAMO,MACdC,EAAQR,EAAMQ,MACdC,EAAYT,EAAMS,UAClBC,EAAiBV,EAAMU,eACvBrE,EAAU2D,EAAM3D,QAEhBqF,EAAaH,EAAcD,GAC3BK,EAAWD,EAAa3C,EACxBX,EAAiB,IAAVhC,EAtIG,EACP,IAuIP,GAAID,GAAW,EAAG,CACZoE,GAASzB,EAAa1C,EAAQ0C,EAAa5D,SAC7CyF,EAAS5D,QAAQ6E,SAASxD,EAAMsD,EAAYC,GAG9C,IAAInH,EAAQqB,KAAK0B,MAAMpB,EAAUE,GAC7BmE,GAAS1B,GAActE,EAAQ4B,GAAS0C,EAAa5D,SACvD0F,EAAS7D,QAAQ6E,SAASxD,EAAMsD,EAAYC,IAI9BlB,GAAatE,GAAW,GAAKC,EAAQ,IAAM,GACtCsE,IAA+B,IAAbvE,GAAkBC,EAAQ,IAAM,KAEvEyE,EAAa9D,QAAQ8E,kBACT,IAAVzF,EAxJiB,KADP,IA0JVsF,GAEFb,EAAa9D,QAAQ6E,SAASxD,EAAMsD,EAAYC,MAGpD,CACEJ,EACAvB,EAAMO,MACNP,EAAMQ,MACNR,EAAMS,UACNT,EAAMU,eACNV,EAAM3D,UAKVa,qBAAU,WACR,IAAIb,EAAU2D,EAAM3D,QADN,EAEwB+E,IAAhCjF,EAFQ,EAERA,QAASC,EAFD,EAECA,MAAOkF,EAFR,EAEQA,YAEtB,GAAInF,IAAY2C,EAAa5D,OAAS,GAAKmB,EACzC6E,QADF,CAKA,IAA6B,IAAzBH,EAAahE,QAEfgE,EAAahE,QAAU,MAClB,CACL,GAAIX,IAAU2E,EAAahE,QAAS,OACpCgE,EAAahE,QAAUX,GAKzBA,GAAS,KAGK0C,EAAa5D,SACzBkB,EAAQ,EACRD,GAAW,GAGTA,IAAY2C,EAAa5D,OAAS,GAAKmB,GAE3CmF,EAAmBpF,EAAOD,EAT1BmF,GAAe,MAUd,CAACF,EAAaF,EAAYM,EAAoBxB,EAAM3D,UAIvD,IAAMyF,EAAclF,uBAClB,YAAoB,IAAjBmF,EAAgB,EAAhBA,UACGrB,EAAiBV,EAAMU,eAE3B7C,EAAQmE,SAER,IAAIlI,EAAM+D,EAAQc,YAElBgC,EAAS5D,QAAQ6B,wBACjBgC,EAAS7D,QAAQ6B,wBACjBiC,EAAa9D,QAAQ6B,wBAErBoC,EAAajE,QAAUgF,EAEvBhB,EAAahE,SAAU,EAEvB4C,GAAS,SAACK,GAAD,mBAAC,eACLA,GADI,IAEPpG,UAAWE,EAAOmH,EAAc,EAAKnC,EAAa5D,OAClDpB,IAAKA,EACLc,UAAW,QAGT8F,GACFG,EAAa9D,QAAQ6E,SAlOT,EAkO+B9H,EAAKA,EAAMiF,GAGxD+B,EAAgB/D,QAAUkF,aAAY,WACpCtC,GAAS,SAACK,GAAD,mBAAC,eAAgBA,GAAjB,IAAwBlG,IAAK+D,EAAQc,mBAC7C,KAEL,CAACd,EAASoD,EAAajB,EAAMU,iBAG/BxD,qBAAU,WAKR,OAJAyD,EAAS5D,QAAU,IAAIa,EAAWC,EAjPtB,KAkPZ+C,EAAS7D,QAAU,IAAIa,EAAWC,EAjPtB,KAkPZgD,EAAa9D,QAAU,IAAIa,EAAWC,EAhPf,MAkPhB,WACLqD,IAEAP,EAAS5D,QAAQ8B,aACjB+B,EAAS7D,QAAQ8B,aACjBgC,EAAa9D,QAAQ8B,gBAEtB,CAAChB,EAASqD,IAIb,IAAMgB,EAAetF,uBACnB,SAACuF,GACC,IAAI9B,EAAQL,EAAMK,MACZiB,EAAgBF,IAAhBE,YAEFxH,EAAM+D,EAAQc,YAAcwD,EAAQ,IAOxC,MAAO,CACLC,eALCtI,EAAMyH,EAAcD,KAAiBL,EAAcZ,GAMpDgC,eAJCd,EAAcD,EAAc,GAAKxH,IAAQmH,GAAe,EAAIZ,OAOjE,CAACe,EAAaG,EAAeN,EAAapD,EAASmC,EAAMK,QAG3DnD,qBAAU,WACR,IAAMoF,EAAgB,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,OAAQpD,EAA8B,EAA9BA,IAAKqD,EAAyB,EAAzBA,QAAST,EAAgB,EAAhBA,UAC7C,IAAIQ,EAAJ,CAEA,IAAI3H,EAAYoF,EAAMpF,UAHuC,EAIpCwG,IAAnBjF,EAJuD,EAIvDA,QAASC,EAJ8C,EAI9CA,MAJ8C,EAKtB8F,EACrCrI,YAAYC,MAAQiI,GADhBK,EALuD,EAKvDA,cAAeC,EALwC,EAKxCA,cAIjBrD,EAAWyD,SAASD,IACtBE,QAAQC,IAAI,QAASP,EAAeC,QAEThH,IAAvBT,EAAUuB,KACZvB,EAAUuB,GAAW,IAGnBiG,EAAgBC,EAClBzH,EAAUuB,GAASC,GAASgG,IAE5BhG,GAAS,KACK0C,EAAa5D,SACzBkB,EAAQ,OAGmBf,IAAvBT,EAFJuB,GAAW,KAGTvB,EAAUuB,GAAW,KAIzBvB,EAAUuB,GAASC,GAASiG,GAG9B1C,GAAS,SAACK,GAAD,mBAAC,eAAgBA,GAAjB,IAAwBpF,kBACxBqE,EAAWwD,SAASD,GAC7BE,QAAQC,IAAI,QAASP,EAAeC,GAEpCK,QAAQC,IAAIxD,EAAKqD,KAMrB,OAFAI,OAAOC,iBAAiB,UAAWP,GAAe,GAE3C,WACLM,OAAOE,oBAAoB,UAAWR,GAAe,MAEtD,CAAClB,EAAac,EAAclC,EAAMpF,YA/RV,IAqSvBqB,EAAeC,EArSQ,EAmSFkF,IAAnBjF,EAnSqB,EAmSrBA,QAASC,EAnSY,EAmSZA,MAcf,YAXgBf,IAAZc,GACFF,EAAgB6F,EAChB5F,EAAc,SACLC,EAAU,GACnBF,EAAgBiF,EAChBhF,EAAcL,KAAK0B,MAAMnB,EAAQ,GAAK,IAEtCH,EAAgBiF,EAChBhF,EAAc,QAId,sBAAKrB,UAAU,YAAf,UACE,sBAAKA,UAAU,WAAf,UACE,2BAAUA,UAAU,QAApB,UACE,cAAC,EAAD,CACE4C,MAAM,SACNE,KAAK,SACLoF,IAAK,EACLC,IAAK,IACLC,KAAM,EACN9E,MAAOgC,EACP+C,SAAUxD,EAAiBC,EAAU,QAASS,YAEhD,cAAC,EAAD,CACE3C,MAAM,WACNE,KAAK,SACLoF,IAAK,EACLC,IAAK,IACLC,KAAM,EACN9E,MAAO9B,EACP6G,SAAUxD,EAAiBC,EAAU,UAAWS,YAElD,cAAC,EAAD,CACE3C,MAAM,SACNE,KAAK,SACLoF,IAAK,GACLC,IAAK,GACLC,KAAM,IACN9E,MAAOkC,EACP6C,SAAUxD,EAAiBC,EAAU,QAASW,iBAIlD,qCACE,qBAAKzF,UAAU,WAAf,qBACA,cAAC,EAAD,CACE4C,MAAM,SACNE,KAAK,WACLmC,QAASS,EACT2C,SAAUxD,EAAiBC,EAAU,WAEvC,cAAC,EAAD,CACElC,MAAM,SACNE,KAAK,WACLmC,QAASU,EACT0C,SAAUxD,EAAiBC,EAAU,WAEvC,cAAC,EAAD,CACElC,MAAM,YACNE,KAAK,WACLmC,QAASW,EACTyC,SAAUxD,EAAiBC,EAAU,eAEvC,cAAC,EAAD,CACElC,MAAM,QACNE,KAAK,WACLmC,QAASY,EACTwC,SAAUxD,EAAiBC,EAAU,0BAK3C,cAAC,EAAD,CACE1D,cAAeA,EACfC,YAAaA,EACb5B,YAAawE,EACb3C,QAASA,EACTC,MAAOA,EACPC,QAASA,EACTzB,UAAWA,QCnaJuI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDRvF,EAAU,IAAI+F,aAEpBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKlG,QAASA,MAEhBhB,SAASmH,eAAe,SAM1Bb,M","file":"static/js/main.d6f2eeb5.chunk.js","sourcesContent":["// Easing fns\n// t: current time, b: begInnIng value, c: target value, d: duration\n\nexport const linearSmooth = (t, b, c, d) => (t / d) * c + b\nexport const easeOutCubic = (t, b, c, d) =>\n  c * ((t = t / d - 1) * t * t + 1) + b\nexport const easeOutSine = (t, b, c, d) =>\n  c * Math.sin((t / d) * (Math.PI / 2)) + b\n\nexport const smoothScroll = (element, position, duration, easingFn) => {\n  let originalPosition = element.scrollTop\n  let dx = position - element.scrollTop\n  let startTime = performance.now()\n\n  let scroll = () => {\n    let dt = performance.now() - startTime\n\n    if (dt > duration) {\n      element.scrollTop = position\n      return\n    }\n\n    element.scrollTop = easingFn(dt, originalPosition, dx, duration)\n\n    requestAnimationFrame(scroll)\n  }\n\n  requestAnimationFrame(scroll)\n}\n\nexport default smoothScroll\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ClapRow = React.forwardRef(\n  (\n    {\n      clapPattern,\n      head,\n      shift,\n      highlightPulse,\n      currentPattern,\n      donePattern,\n      userInput,\n      className,\n    },\n    ref,\n  ) => (\n    <div ref={ref} className={`clap-row ${className}`}>\n      <div className=\"head\">{head}</div>\n      <div className=\"pattern\">\n        {clapPattern.map((_, i) => {\n          let shifted = (i + shift) % clapPattern.length\n          let isClap = clapPattern[shifted]\n          let className = `cell pulse ${isClap ? 'clap' : 'silence'} ${\n            i === highlightPulse ? 'highlight' : ''\n          } `\n\n          let didntHit = userInput === undefined || userInput[i] === undefined\n          let colorClass = didntHit\n            ? 'no-hit'\n            : userInput[i] > 2 / 3\n            ? 'hit-bad'\n            : userInput[i] > 1 / 3\n            ? 'hit-ok'\n            : 'hit-good'\n\n          if (currentPattern) {\n            if (i < highlightPulse || (i === highlightPulse && !didntHit)) {\n              className += colorClass\n            }\n          } else if (donePattern || userInput !== undefined) {\n            className += colorClass\n          }\n\n          return <div key={i} className={className} />\n        })}\n      </div>\n    </div>\n  ),\n)\n\nClapRow.propTypes = {\n  head: PropTypes.string,\n  shift: PropTypes.number,\n  className: PropTypes.string,\n}\n\nClapRow.defaultProps = {\n  head: '',\n  shift: 0,\n  className: '',\n}\n\nexport default ClapRow\n","import { smoothScroll, easeOutSine } from '../smoothScroll'\n\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\n\nimport ClapRow from './ClapRow'\n\nconst EMPTY_ROWS = 1\nconst SCROLL_DURATION = 300\nconst SCROLL_EASING = easeOutSine\n\nconst PatternTable = ({\n  buttonHandler,\n  buttonLabel,\n  clapPattern,\n  pattern,\n  pulse,\n  repeats,\n  userInput,\n  className,\n}) => {\n  let originalPattern = pattern\n\n  if (pattern === undefined || pattern <= 0) pattern = 0\n\n  const rowsRef = useRef([])\n  const scrollAnchorRef = useRef(null)\n  const isFirstRenderRef = useRef(true)\n\n  const scrollToPattern = useCallback((i) => {\n    smoothScroll(\n      document.scrollingElement,\n      rowsRef.current[i].offsetTop -\n        scrollAnchorRef.current.offsetTop +\n        rowsRef.current[i].offsetHeight -\n        /* HACK */ 4,\n      SCROLL_DURATION,\n      SCROLL_EASING,\n    )\n  }, [])\n\n  // TODO: What does this do?\n  useEffect(() => {\n    scrollAnchorRef.current.scrollTop =\n      rowsRef.current[0] -\n      scrollAnchorRef.current.offsetTop +\n      rowsRef.current[0].offsetHeight -\n      4\n  }, [])\n\n  useEffect(() => {\n    if (isFirstRenderRef.current) {\n      isFirstRenderRef.current = false\n    } else {\n      scrollToPattern(pattern === undefined || pattern <= 0 ? 0 : pattern)\n    }\n  }, [pattern, scrollToPattern])\n\n  return (\n    <div\n      className={`pattern-table noselect ${className}`}\n      ref={(e) => {\n        scrollAnchorRef.current = e\n      }}\n    >\n      <div className=\"arrow-row\">\n        <div className=\"head\">\n          <button className=\"noselect\" onClick={buttonHandler}>\n            {buttonLabel}\n          </button>\n        </div>\n        <div className=\"pattern\">\n          {clapPattern.map((_, i) => (\n            <div key={i} className=\"cell arrow\">\n              {originalPattern >= -1 && i === pulse ? '▼' : ''}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"pattern-clap1\">\n        <ClapRow\n          clapPattern={clapPattern}\n          head={'Clap 1 ➡'}\n          shift={0}\n          highlightPulse={pulse}\n        />\n      </div>\n\n      <div className=\"pattern-clap2\">\n        {Array.apply(null, { length: EMPTY_ROWS }).map((_, i) => (\n          <ClapRow\n            key={i}\n            ref={(e) => {\n              rowsRef.current[i] = e\n            }}\n            clapPattern={clapPattern}\n            className=\"empty\"\n          />\n        ))}\n        {Array.apply(null, {\n          length: (clapPattern.length + 1) * repeats,\n        }).map((_, i) => (\n          <ClapRow\n            key={i}\n            ref={(e) => {\n              rowsRef.current[i + EMPTY_ROWS] = e\n            }}\n            clapPattern={clapPattern}\n            className={i === pattern ? 'highlight' : ''}\n            highlightPulse={i === pattern ? pulse : undefined}\n            head={i === pattern ? 'Clap 2 ➡' : ''}\n            shift={Math.floor(i / repeats)}\n            userInput={userInput[i]}\n            donePattern={i < originalPattern}\n            currentPattern={i === originalPattern}\n          />\n        ))}\n        <div className=\"padder\">\n          <div className=\"head\" />\n          <div className=\"pattern empty\">\n            {clapPattern.map((_, i) => {\n              return <div key={i} className=\"cell pulse\" />\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nPatternTable.propTypes = {\n  className: PropTypes.string,\n}\n\nPatternTable.defaultProps = {\n  className: '',\n}\n\nexport default PatternTable\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Input = ({ label, ...props }) => (\n  <label>\n    {props.type !== 'checkbox' ? (\n      <span className=\"label noselect\">{label}</span>\n    ) : null}\n    <input {...props} />\n    {props.type === 'checkbox' ? (\n      <span className=\"label noselect\">{label}</span>\n    ) : null}\n  </label>\n)\n\nInput.propTypes = {\n  label: PropTypes.string,\n}\n\nexport default Input\n","export default class Oscillator {\n  constructor(context, f) {\n    this.f = f;\n    this.context = context;\n\n    this.oscillator = context.createOscillator();\n    this.oscillator.type = 'square';\n    this.oscillator.frequency.value = f;\n\n    this.gain = context.createGain();\n    this.gain.gain.value = 0;\n\n    this.oscillator.start();\n    this.oscillator.connect(this.gain);\n\n    this.gain.connect(context.destination);\n  }\n\n  schedule(gain, start, end) {\n    this.gain.gain.setValueAtTime(gain, start);\n    this.gain.gain.setValueAtTime(0, end);\n  }\n\n  scheduleFrequency(frequency, start) {\n    this.oscillator.frequency.setValueAtTime(frequency, start);\n  }\n\n  cancelScheduledValues() {\n    let now = this.context.currentTime;\n\n    this.oscillator.frequency.cancelScheduledValues(now);\n    this.gain.gain.cancelScheduledValues(now);\n\n    this.gain.gain.value = 0;\n    this.oscillator.frequency.value = this.f;\n  }\n\n  disconnect() {\n    this.gain.disconnect();\n    this.oscillator.disconnect();\n  }\n}\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\n\nimport PatternTable from './PatternTable'\nimport Input from './Input'\n\nimport Oscillator from '../Oscillator'\n\nconst CLAP_PATTERN = [\n  true,\n  true,\n  true,\n  false,\n  true,\n  true,\n  false,\n  true,\n  false,\n  true,\n  true,\n  false,\n]\nconst CLAP_LENGTH = 0.0125\nconst CLAP1_F = 440\nconst CLAP2_F = 230\nconst METRONOME_F = 890\nconst METRONOME_ACCENT_F = 1780\nconst ACCENT_GAIN = 1\nconst GAIN = 0.25\nconst CLAP1_KEYS = [90]\nconst CLAP2_KEYS = [77]\n\nconst localStorageGet = (key, parser, defaultVal) => {\n  let result = localStorage.getItem(key)\n  return result !== null ? parser(result) : defaultVal\n}\n\nconst parseBool = (b) => b === 'true'\n\nconst useHandleSetting = (setState, key, f) => {\n  if (typeof f === 'undefined') {\n    f = (x) => x\n  }\n\n  return useCallback(\n    ({ target: { type, value, checked } }) => {\n      if (type === 'checkbox') {\n        localStorage.setItem(key, checked)\n        setState((state) => ({ ...state, [`${key}`]: f(checked) }))\n      } else {\n        localStorage.setItem(key, value)\n        setState((state) => ({ ...state, [`${key}`]: f(value) }))\n      }\n    },\n    [setState, key, f],\n  )\n}\n\nconst App = ({ context }) => {\n  const [state, setState] = useState({\n    tempo: localStorageGet('tempo', parseInt, 120),\n    repeats: localStorageGet('repeats', parseInt, 4),\n    swing: localStorageGet('swing', parseFloat, 0.5),\n    clap1: localStorageGet('clap1', parseBool, true),\n    clap2: localStorageGet('clap2', parseBool, true),\n    metronome: localStorageGet('metronome', parseBool, false),\n    countMetronome: localStorageGet('countMetronome', parseBool, true),\n    startTime: false,\n    now: false,\n    userInput: false,\n  })\n\n  const {\n    tempo,\n    repeats,\n    swing,\n    clap1,\n    clap2,\n    metronome,\n    countMetronome,\n    userInput,\n  } = state\n\n  const clap1Ref = useRef(null)\n  const clap2Ref = useRef(null)\n  const metronomeRef = useRef(null)\n  const timeIntervalRef = useRef(null)\n  const lastPulseRef = useRef(null)\n  const timeStampRef = useRef(null)\n\n  const secsPerBeat = 60 / state.tempo\n\n  const handleStop = useCallback(() => {\n    clearInterval(timeIntervalRef.current)\n\n    clap1Ref.current.cancelScheduledValues()\n    clap2Ref.current.cancelScheduledValues()\n    metronomeRef.current.cancelScheduledValues()\n\n    setState((state) => ({\n      ...state,\n      startTime: false,\n      now: false,\n    }))\n  }, [])\n\n  const getPosition = useCallback(() => {\n    let startTime = state.startTime\n    let swing = state.swing\n    let now = state.now\n\n    if (startTime === false) return {}\n\n    let totalBeats = (now - startTime) / secsPerBeat\n\n    let totalPulses =\n      Math.floor(totalBeats) * 2 + ((1 + (totalBeats % 1)) % 1 < swing ? 0 : 1)\n\n    // console.log(totalPulses);\n\n    if (startTime >= now) {\n      let pulse = totalPulses\n      while (pulse < 0) pulse += CLAP_PATTERN.length\n\n      return {\n        pattern: Math.floor(totalPulses / CLAP_PATTERN.length),\n        pulse,\n        totalPulses,\n      }\n    }\n\n    return {\n      pattern: Math.floor(totalPulses / CLAP_PATTERN.length),\n      pulse: totalPulses % CLAP_PATTERN.length,\n      totalPulses,\n    }\n  }, [secsPerBeat, state.startTime, state.swing, state.now])\n\n  const getPulseStart = useCallback(\n    (totalPulses) => {\n      let startTime = state.startTime\n      let swing = state.swing\n\n      let totalBeats =\n        Math.floor(totalPulses / 2) + (totalPulses % 2 === 0 ? 0 : swing)\n\n      return startTime + totalBeats * secsPerBeat\n    },\n    [secsPerBeat, state.startTime, state.swing],\n  )\n\n  const schedulePulseSound = useCallback(\n    (pulse, pattern, totalPulses, instant) => {\n      let clap1 = state.clap1\n      let clap2 = state.clap2\n      let metronome = state.metronome\n      let countMetronome = state.countMetronome\n      let repeats = state.repeats\n\n      let pulseStart = getPulseStart(totalPulses)\n      let pulseEnd = pulseStart + CLAP_LENGTH\n      let gain = pulse === 0 ? ACCENT_GAIN : GAIN\n\n      if (pattern >= 0) {\n        if (clap1 && CLAP_PATTERN[pulse % CLAP_PATTERN.length]) {\n          clap1Ref.current.schedule(gain, pulseStart, pulseEnd)\n        }\n\n        let shift = Math.floor(pattern / repeats)\n        if (clap2 && CLAP_PATTERN[(shift + pulse) % CLAP_PATTERN.length]) {\n          clap2Ref.current.schedule(gain, pulseStart, pulseEnd)\n        }\n      }\n\n      let isMetronome = metronome && pattern >= 0 && pulse % 2 === 0\n      let isCountMetronome = countMetronome && pattern === -1 && pulse % 2 === 0\n      if (isMetronome || isCountMetronome) {\n        metronomeRef.current.scheduleFrequency(\n          pulse === 0 ? METRONOME_ACCENT_F : METRONOME_F,\n          pulseStart,\n        )\n        metronomeRef.current.schedule(gain, pulseStart, pulseEnd)\n      }\n    },\n    [\n      getPulseStart,\n      state.clap1,\n      state.clap2,\n      state.metronome,\n      state.countMetronome,\n      state.repeats,\n    ],\n  )\n\n  // handleSound\n  useEffect(() => {\n    let repeats = state.repeats\n    let { pattern, pulse, totalPulses } = getPosition()\n\n    if (pattern >= (CLAP_PATTERN.length + 1) * repeats) {\n      handleStop()\n      return\n    }\n\n    if (lastPulseRef.current === false) {\n      // Just started: schedfule first pulse\n      lastPulseRef.current = 0\n    } else {\n      if (pulse === lastPulseRef.current) return\n      lastPulseRef.current = pulse\n    }\n\n    // Schedule _next_ pulse\n\n    pulse += 1\n    totalPulses += 1\n\n    if (pulse === CLAP_PATTERN.length) {\n      pulse = 0\n      pattern += 1\n    }\n\n    if (pattern >= (CLAP_PATTERN.length + 1) * repeats) return\n\n    schedulePulseSound(pulse, pattern, totalPulses)\n  }, [getPosition, handleStop, schedulePulseSound, state.repeats])\n\n  // Playback methods\n\n  const handleStart = useCallback(\n    ({ timeStamp }) => {\n      let countMetronome = state.countMetronome\n\n      context.resume()\n\n      let now = context.currentTime\n\n      clap1Ref.current.cancelScheduledValues()\n      clap2Ref.current.cancelScheduledValues()\n      metronomeRef.current.cancelScheduledValues()\n\n      timeStampRef.current = timeStamp\n\n      lastPulseRef.current = false\n\n      setState((state) => ({\n        ...state,\n        startTime: now + (secsPerBeat / 2) * CLAP_PATTERN.length,\n        now: now,\n        userInput: [],\n      }))\n\n      if (countMetronome) {\n        metronomeRef.current.schedule(ACCENT_GAIN, now, now + CLAP_LENGTH)\n      }\n\n      timeIntervalRef.current = setInterval(() => {\n        setState((state) => ({ ...state, now: context.currentTime }))\n      }, 1)\n    },\n    [context, secsPerBeat, state.countMetronome],\n  )\n\n  useEffect(() => {\n    clap1Ref.current = new Oscillator(context, CLAP1_F)\n    clap2Ref.current = new Oscillator(context, CLAP2_F)\n    metronomeRef.current = new Oscillator(context, METRONOME_ACCENT_F)\n\n    return () => {\n      handleStop()\n\n      clap1Ref.current.disconnect()\n      clap2Ref.current.disconnect()\n      metronomeRef.current.disconnect()\n    }\n  }, [context, handleStop])\n\n  //\n\n  const getPulseDiff = useCallback(\n    (delta) => {\n      let swing = state.swing\n      let { totalPulses } = getPosition()\n\n      let now = context.currentTime - delta / 1000\n\n      let currPulseDiff =\n        (now - getPulseStart(totalPulses)) / (secsPerBeat * swing)\n      let nextPulseDiff =\n        (getPulseStart(totalPulses + 1) - now) / (secsPerBeat * (1 - swing))\n\n      return {\n        currPulseDiff,\n        nextPulseDiff,\n      }\n    },\n    [getPosition, getPulseStart, secsPerBeat, context, state.swing],\n  )\n\n  useEffect(() => {\n    const handleKeyDown = ({ repeat, key, keyCode, timeStamp }) => {\n      if (repeat) return\n\n      let userInput = state.userInput\n      let { pattern, pulse } = getPosition()\n      let { currPulseDiff, nextPulseDiff } = getPulseDiff(\n        performance.now() - timeStamp,\n      )\n\n      if (CLAP1_KEYS.includes(keyCode)) {\n        console.log('clap1', currPulseDiff, nextPulseDiff)\n\n        if (userInput[pattern] === undefined) {\n          userInput[pattern] = []\n        }\n\n        if (currPulseDiff < nextPulseDiff) {\n          userInput[pattern][pulse] = currPulseDiff\n        } else {\n          pulse += 1\n          if (pulse === CLAP_PATTERN.length) {\n            pulse = 0\n            pattern += 1\n\n            if (userInput[pattern] === undefined) {\n              userInput[pattern] = []\n            }\n          }\n\n          userInput[pattern][pulse] = nextPulseDiff\n        }\n\n        setState((state) => ({ ...state, userInput }))\n      } else if (CLAP2_KEYS.includes(keyCode)) {\n        console.log('clap2', currPulseDiff, nextPulseDiff)\n      } else {\n        console.log(key, keyCode)\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown, false)\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown, false)\n    }\n  }, [getPosition, getPulseDiff, state.userInput])\n\n  // RENDER\n\n  let { pattern, pulse } = getPosition()\n\n  let buttonHandler, buttonLabel\n  if (pattern === undefined) {\n    buttonHandler = handleStart\n    buttonLabel = 'Start'\n  } else if (pattern < 0) {\n    buttonHandler = handleStop\n    buttonLabel = Math.floor(pulse / 2) + 1\n  } else {\n    buttonHandler = handleStop\n    buttonLabel = 'Stop'\n  }\n\n  return (\n    <div className=\"reich-app\">\n      <div className=\"controls\">\n        <fieldset className=\"tempo\">\n          <Input\n            label=\"Tempo:\"\n            type=\"number\"\n            min={1}\n            max={999}\n            step={1}\n            value={tempo}\n            onChange={useHandleSetting(setState, 'tempo', parseInt)}\n          />\n          <Input\n            label=\"Repeats:\"\n            type=\"number\"\n            min={1}\n            max={999}\n            step={1}\n            value={repeats}\n            onChange={useHandleSetting(setState, 'repeats', parseInt)}\n          />\n          <Input\n            label=\"Swing:\"\n            type=\"number\"\n            min={0.1}\n            max={0.9}\n            step={0.01}\n            value={swing}\n            onChange={useHandleSetting(setState, 'swing', parseFloat)}\n          />\n        </fieldset>\n\n        <fieldset>\n          <div className=\"noselect\">Sounds:</div>\n          <Input\n            label=\"Clap 1\"\n            type=\"checkbox\"\n            checked={clap1}\n            onChange={useHandleSetting(setState, 'clap1')}\n          />\n          <Input\n            label=\"Clap 2\"\n            type=\"checkbox\"\n            checked={clap2}\n            onChange={useHandleSetting(setState, 'clap2')}\n          />\n          <Input\n            label=\"Metronome\"\n            type=\"checkbox\"\n            checked={metronome}\n            onChange={useHandleSetting(setState, 'metronome')}\n          />\n          <Input\n            label=\"Count\"\n            type=\"checkbox\"\n            checked={countMetronome}\n            onChange={useHandleSetting(setState, 'countMetronome')}\n          />\n        </fieldset>\n      </div>\n\n      <PatternTable\n        buttonHandler={buttonHandler}\n        buttonLabel={buttonLabel}\n        clapPattern={CLAP_PATTERN}\n        pattern={pattern}\n        pulse={pulse}\n        repeats={repeats}\n        userInput={userInput}\n      />\n    </div>\n  )\n}\n\nApp.propTypes = {}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals'\n\nconst context = new AudioContext()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App context={context} />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}